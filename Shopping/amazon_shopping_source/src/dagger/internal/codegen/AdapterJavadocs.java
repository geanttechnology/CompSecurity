// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 

package dagger.internal.codegen;


public final class AdapterJavadocs
{

    static final String ATTACH_METHOD = "Used internally to link bindings/providers together at run time\naccording to their dependency graph.";
    static final String GENERATED_BY_DAGGER = "Code generated by dagger-compiler.  Do not edit.";
    static final String GET_DEPENDENCIES_METHOD = "Used internally obtain dependency information, such as for cyclical\ngraph detection.";
    static final String GET_METHOD = "Returns the fully provisioned instance satisfying the contract for\n{@code Provider<%s>}.";
    static final String MEMBERS_INJECT_METHOD = "Injects any {@code @Inject} annotated fields in the given instance,\nsatisfying the contract for {@code Provider<%s>}.";
    static final String MODULE_TYPE = "A manager of modules and provides adapters allowing for proper linking and\ninstance provision of types served by {@code @Provides} methods.";
    static final String STATIC_INJECTION_TYPE = "A manager for {@code %s}'s injections into static fields.";
    static final String STATIC_INJECT_METHOD = "Performs the injections of dependencies into static fields when requested by\nthe {@code dagger.ObjectGraph}.";

    public AdapterJavadocs()
    {
    }

    static String bindingTypeDocs(String s, boolean flag, boolean flag1, boolean flag2)
    {
        StringBuffer stringbuffer = new StringBuffer();
        stringbuffer.append("A {@code Binding<").append(s).append(">} implementation which satisfies\n");
        stringbuffer.append("Dagger's infrastructure requirements including:");
        if (flag2)
        {
            stringbuffer.append("\n\n");
            stringbuffer.append((new StringBuilder()).append("Owning the dependency links between {@code ").append(s).append("} and its\n").toString());
            stringbuffer.append("dependencies.");
        }
        if (!flag)
        {
            stringbuffer.append("\n\n");
            stringbuffer.append((new StringBuilder()).append("Being a {@code Provider<").append(s).append(">} and handling creation and\n").toString());
            stringbuffer.append("preparation of object instances.");
        }
        if (flag1)
        {
            stringbuffer.append("\n\n");
            stringbuffer.append((new StringBuilder()).append("Being a {@code MembersInjector<").append(s).append(">} and handling injection\n").toString());
            stringbuffer.append("of annotated fields.");
        }
        return stringbuffer.toString();
    }
}
