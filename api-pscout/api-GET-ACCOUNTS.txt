Permission:android.permission.GET_ACCOUNTS
1496 Callers:
<android.accounts.AccountManagerService: void checkReadAccountsPermission ()> (4)
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts (int)> (2)
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts (java.lang.String)> (2)
<android.accounts.AccountManagerService: void getAccountsByFeatures (android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> (2)
<android.accounts.AccountManagerService: void hasFeatures (android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> (2)
<android.content.SyncManager$SyncHandler: void onBootCompleted ()> (1)
<android.content.SyncManager: void onAccountsUpdated (android.accounts.Account[])> (3)
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccounts (java.lang.String)> ()
<android.accounts.IAccountManager$Stub: android.accounts.Account[] getAccounts (java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures (android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> ()
<android.accounts.IAccountManager$Stub: void getAccountsByFeatures (android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> (2)
<android.accounts.IAccountManager$Stub$Proxy: void hasFeatures (android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> ()
<android.accounts.IAccountManager$Stub: void hasFeatures (android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> (2)
<android.content.SyncManager$2: void onReceive (android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager: void <init> (android.content.Context,boolean)> (1)
<android.content.SyncManager: void onUserRemoved (android.content.Intent)> (1)
<android.accounts.IAccountManager: android.accounts.Account[] getAccounts (java.lang.String)> (2)
<android.accounts.IAccountManager$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.IAccountManager: void getAccountsByFeatures (android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> (1)
<android.accounts.IAccountManager: void hasFeatures (android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> (1)
<android.content.ContentService: android.content.SyncManager getSyncManager ()> (20)
<android.content.SyncManager: void access$700 (android.content.SyncManager,android.content.Intent)> (1)
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType (java.lang.String)> (17)
<android.accounts.AccountManager: android.accounts.Account[] getAccounts ()> (20)
<android.accounts.AccountManagerService: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.AccountManager$3: void doWork ()> (1)
<android.accounts.AccountManager$2: void doWork ()> (1)
<android.content.ContentService: void <init> (android.content.Context,boolean)> (1)
<android.content.SyncManager$6: void onReceive (android.content.Context,android.content.Intent)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccountsByType (java.lang.String)> (1)
<com.android.browser.DeviceAccountLogin: void handleLogin (java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.GoogleAccountLogin: android.accounts.Account[] getAccounts (android.content.Context)> (1)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void enableSync (android.database.sqlite.SQLiteDatabase)> (2)
<com.android.development.AccountsTester$ButtonClickListener: void onClick (android.view.View)> (1)
<com.android.development.SyncAdapterDriver: void startSyncSelected (android.view.View)> ()
<com.android.email.provider.DBHelper$DatabaseHelper: void onUpgrade (android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.email.service.AccountService$1: void reconcileAccounts (java.lang.String,java.lang.String)> (2)
<com.android.email.service.MailService$6: void runInternal (android.content.Context)> (1)
<com.android.email.service.MailService: boolean hasMismatchInPopImapAccounts (android.content.Context)> (1)
<com.android.exchange.CalendarSyncEnabler: java.lang.String enableEasCalendarSyncInternalForTest ()> (1)
<com.android.exchange.provider.ExchangeDirectoryProvider: android.database.Cursor query (android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: android.accounts.Account findIntendedAccount (java.lang.String)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void <init> (com.android.internal.policy.impl.LockPatternKeyguardView,android.accounts.AccountManager)> (1)
<com.android.launcher2.Launcher: boolean skipCustomClingIfNoAccounts ()> (1)
<com.android.providers.contacts.ContactsProvider2: android.accounts.Account getDefaultAccount ()> (1)
<com.android.settings.Settings: int insertAccountsHeaders (java.util.List,int)> (39)
<android.accounts.AccountManager$13: void onReceive (android.content.Context,android.content.Intent)> (1)
<android.accounts.AccountManager: void addOnAccountsUpdatedListener (android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)> (9)
<android.accounts.ChooseTypeAndAccountActivity: void onCreate (android.os.Bundle)> (1)
<android.accounts.ChooseTypeAndAccountActivity: void run (android.accounts.AccountManagerFuture)> (1)
<com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts: void run ()> (2)
<com.android.browser.provider.BrowserProvider2: int updateInTransaction (android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (1)
<com.android.calendar.CalendarController: void refreshCalendars ()> (1)
<com.android.calendar.CalendarSettingsActivity$1: void run ()> (1)
<com.android.calendar.CalendarSettingsActivity: void onBuildHeaders (java.util.List)> (1)
<com.android.contacts.ContactListEmptyView: boolean isSyncActive ()> (1)
<com.android.contacts.list.ContactEntryListFragment: boolean isSyncActive ()> (7)
<com.android.contacts.model.AccountTypeManagerImpl: void loadAccountsInBackground ()> (5)
<com.android.email.service.AttachmentDownloadService$AccountManagerStub: int getNumberOfAccounts ()> (1)
<com.android.providers.calendar.CalendarProvider2: void verifyAccounts ()> (1)
<com.android.providers.contacts.ContactsProvider2: void performBackgroundTask (int,java.lang.Object)> (1)
<com.android.settings.accounts.AccountSyncSettings: void onResume ()> (4)
<com.android.settings.accounts.AuthenticatorHelper: void onAccountsUpdated (android.content.Context,android.accounts.Account[])> (2)
<com.android.settings.MasterClear: void loadAccountList ()> (1)
<android.accounts.AccountManager$BaseFutureTask: void doWork ()> (1)
<android.content.ContentService: android.content.IContentService main (android.content.Context,boolean)> (1)
<com.android.browser.Tab$2: void onReceivedLoginRequest (android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.GoogleAccountLogin: void startLoginIfNeeded (android.app.Activity,java.lang.Runnable)> (1)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onCreate (android.database.sqlite.SQLiteDatabase)> (2)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onUpgrade (android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void reconcileAccounts (java.lang.String,java.lang.String)> ()
<com.android.emailcommon.service.IAccountService$Stub: void reconcileAccounts (java.lang.String,java.lang.String)> (2)
<com.android.email.service.MailService$6: void runInternal (java.lang.Object)> (1)
<com.android.email.activity.Welcome$1: void run ()> (1)
<com.android.exchange.CalendarSyncEnabler: void enableEasCalendarSync ()> ()
<com.android.internal.policy.impl.AccountUnlockScreen: void asyncCheckPassword ()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void <init> (com.android.internal.policy.impl.LockPatternKeyguardView,android.accounts.AccountManager,com.android.internal.policy.impl.LockPatternKeyguardView$1)> (1)
<com.android.launcher2.Launcher: void showFirstRunWorkspaceCling ()> (1)
<com.android.settings.Settings$AccessibilitySettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$AccountSyncSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$AdvancedWifiSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$AndroidBeamSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$ApplicationSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$BluetoothSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$CryptKeeperSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$DataUsageSummaryActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$DateTimeSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$DevelopmentSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$DeviceAdminSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$DeviceInfoSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$DisplaySettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$DockSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$KeyboardLayoutPickerActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$LocalePickerActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$LocationSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$ManageAccountsSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$ManageApplicationsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$PowerUsageSummaryActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$PrivacySettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$RunningServicesActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$SecuritySettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$SoundSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$SpellCheckersSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$StorageSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$StorageUseActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$TetherSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$TextToSpeechSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$UserDictionarySettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings: void updateHeaderList (java.util.List)> (39)
<com.android.settings.Settings$VpnSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$WifiP2pSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$WifiSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.Settings$WirelessSettingsActivity: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.settings.SubSettings: int insertAccountsHeaders (java.util.List,int)> (1)
<com.android.contacts.model.AccountTypeManagerImpl: void <init> (android.content.Context)> (1)
<com.android.development.AccountsTester: void onStart ()> (1)
<com.android.settings.accounts.ManageAccountsSettings: void onStart ()> (4)
<com.android.settings.accounts.SyncSettings: void onStart ()> (4)
<com.android.browser.AccountsChangedReceiver: void onReceive (android.content.Context,android.content.Intent)> (1)
<com.android.calendar.AllInOneActivity: boolean onOptionsItemSelected (android.view.MenuItem)> (1)
<com.android.contacts.ContactListEmptyView: void show (boolean,boolean,boolean,boolean,boolean,boolean,boolean)> ()
<com.android.contacts.list.ContactBrowseListFragment: boolean isSyncActive ()> (2)
<com.android.contacts.list.ContactPickerFragment: boolean isSyncActive ()> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: boolean isSyncActive ()> (1)
<com.android.contacts.list.EmailAddressPickerFragment: boolean isSyncActive ()> (1)
<com.android.contacts.list.JoinContactListFragment: boolean isSyncActive ()> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: boolean isSyncActive ()> (1)
<com.android.contacts.list.PostalAddressPickerFragment: boolean isSyncActive ()> (1)
<com.android.contacts.model.AccountTypeManagerImpl: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.contacts.model.AccountTypeManagerImpl: void onStatusChanged (int)> (1)
<com.android.contacts.model.AccountTypeManagerImpl: void processBroadcastIntent (android.content.Intent)> (1)
<com.android.email.service.AttachmentDownloadService: boolean canPrefetchForAccount (com.android.emailcommon.provider.Account,java.io.File)> (1)
<com.android.providers.calendar.CalendarProvider2: void access$300 (com.android.providers.calendar.CalendarProvider2)> (1)
<com.android.settings.accounts.AccountPreferenceBase: void onResume ()> (6)
<com.android.settings.SettingsPreferenceFragment: void onResume ()> (28)
<com.android.settings.Settings: void onAccountsUpdated (android.accounts.Account[])> (39)
<com.android.settings.Settings: void onCreate (android.os.Bundle)> (40)
<com.android.settings.MasterClear: void establishInitialState ()> (2)
<android.accounts.AccountManager$BaseFutureTask: void startTask ()> (5)
<com.android.server.ServerThread: void run ()> (1)
<com.android.browser.Controller: void doStart (android.os.Bundle,android.content.Intent)> (1)
<com.android.emailcommon.service.IAccountService$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.IAccountService: void reconcileAccounts (java.lang.String,java.lang.String)> (1)
<com.android.email.SingleRunningTask: void runInternal (java.lang.Object)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onClick (android.view.View)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView: void maybeEnableFallback (android.content.Context)> (1)
<com.android.launcher2.Launcher: void onCreate (android.os.Bundle)> (1)
<com.android.settings.Settings$AccessibilitySettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$AccountSyncSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$AdvancedWifiSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$AndroidBeamSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$ApplicationSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$BluetoothSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$CryptKeeperSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$DataUsageSummaryActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$DateTimeSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$DevelopmentSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$DeviceAdminSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$DeviceInfoSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$DisplaySettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$DockSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$KeyboardLayoutPickerActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$LocalePickerActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$LocationSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$ManageAccountsSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$ManageApplicationsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$PowerUsageSummaryActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$PrivacySettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$RunningServicesActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$SecuritySettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$SoundSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$SpellCheckersSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$StorageSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$StorageUseActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$TetherSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$TextToSpeechSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$UserDictionarySettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings: void onBuildHeaders (java.util.List)> (39)
<com.android.settings.Settings$VpnSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$WifiP2pSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$WifiSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.Settings$WirelessSettingsActivity: void updateHeaderList (java.util.List)> (1)
<com.android.settings.SubSettings: void updateHeaderList (java.util.List)> (1)
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.AccountTypeManager createAccountTypeManager (android.content.Context)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onStart ()> (5)
<com.android.settings.SettingsPreferenceFragment: void onStart ()> (4)
<com.android.contacts.list.ContactBrowseListFragment: void prepareEmptyView ()> (2)
<com.android.contacts.list.ContactPickerFragment: void prepareEmptyView ()> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void processQueue ()> (2)
<com.android.settings.accounts.ManageAccountsSettings: void onResume ()> (4)
<com.android.settings.accounts.SyncSettings: void onResume ()> (4)
<com.android.settings.AccessibilitySettings: void onResume ()> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume ()> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume ()> (3)
<com.android.settings.DateTimeSettings: void onResume ()> (3)
<com.android.settings.deviceinfo.Memory: void onResume ()> (3)
<com.android.settings.deviceinfo.UsbSettings: void onResume ()> (3)
<com.android.settings.DisplaySettings: void onResume ()> (3)
<com.android.settings.DockSettings: void onResume ()> (3)
<com.android.settings.DreamSettings: void onResume ()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume ()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume ()> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onResume ()> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onResume ()> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onResume ()> (3)
<com.android.settings.LocationSettings: void onResume ()> (3)
<com.android.settings.PrivacySettings: void onResume ()> (3)
<com.android.settings.SecuritySettings: void onResume ()> (3)
<com.android.settings.SoundSettings: void onResume ()> (3)
<com.android.settings.users.UserDetailsSettings: void onResume ()> (3)
<com.android.settings.users.UserSettings: void onResume ()> (3)
<com.android.settings.vpn2.VpnSettings: void onResume ()> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onResume ()> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onResume ()> (3)
<com.android.settings.wifi.WifiSettings: void onResume ()> (3)
<com.android.settings.WirelessSettings: void onResume ()> (3)
<com.android.settings.Settings$AccessibilitySettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$AccountSyncSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$AdvancedWifiSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$AndroidBeamSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$ApplicationSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$BluetoothSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$CryptKeeperSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$DataUsageSummaryActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$DateTimeSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$DevelopmentSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$DeviceAdminSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$DeviceInfoSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$DisplaySettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$DockSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$KeyboardLayoutPickerActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$LocalePickerActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$LocationSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$ManageAccountsSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$ManageApplicationsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$PowerUsageSummaryActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$PrivacySettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$RunningServicesActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$SecuritySettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$SoundSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$SpellCheckersSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$StorageSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$StorageUseActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$TetherSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$TextToSpeechSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$UserDictionarySettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$VpnSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$WifiP2pSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$WifiSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$WirelessSettingsActivity: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.SubSettings: void onAccountsUpdated (android.accounts.Account[])> (1)
<com.android.settings.Settings$AccessibilitySettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$AccountSyncSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$AdvancedWifiSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$AndroidBeamSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$ApplicationSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$BluetoothSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$CryptKeeperSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$DataUsageSummaryActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$DateTimeSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$DevelopmentSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$DeviceAdminSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$DeviceInfoSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$DisplaySettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$DockSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$KeyboardLayoutPickerActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$LocalePickerActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$LocationSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$ManageAccountsSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$ManageApplicationsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$PowerUsageSummaryActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$PrivacySettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$RunningServicesActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$SecuritySettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$SoundSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$SpellCheckersSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$StorageSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$StorageUseActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$TetherSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$TextToSpeechSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$UserDictionarySettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$VpnSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$WifiP2pSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$WifiSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.Settings$WirelessSettingsActivity: void onCreate (android.os.Bundle)> (3)
<com.android.settings.SubSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.MasterClear: android.view.View onCreateView (android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.settings.MasterClear: void onActivityResult (int,int,android.content.Intent)> (1)
<android.accounts.AccountManager$1: void startTask ()> (1)
<android.accounts.AccountManager$2: void startTask ()> (1)
<android.accounts.AccountManager$3: void startTask ()> (1)
<android.accounts.AccountManager$4: void startTask ()> (1)
<android.accounts.AccountManager$Future2Task: void startTask ()> (2)
<com.android.browser.CrashRecoveryHandler: void startRecovery (android.content.Intent)> (1)
<com.android.email.service.AccountService$1: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.AccountServiceProxy$3: void run ()> (1)
<com.android.email.SingleRunningTask: void run (java.lang.Object)> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void <init> (android.content.Context,com.android.internal.policy.impl.KeyguardViewCallback,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardWindowController)> (1)
<com.android.settings.Settings$AccessibilitySettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$AccountSyncSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$AdvancedWifiSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$AndroidBeamSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$ApplicationSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$BluetoothSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$CryptKeeperSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$DataUsageSummaryActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$DateTimeSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$DevelopmentSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$DeviceAdminSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$DeviceInfoSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$DisplaySettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$DockSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$KeyboardLayoutPickerActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$LocalePickerActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$LocationSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$ManageAccountsSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$ManageApplicationsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$PowerUsageSummaryActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$PrivacySettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$RunningServicesActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$SecuritySettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$SoundSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$SpellCheckersSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$StorageSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$StorageUseActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$TetherSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$TextToSpeechSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$UserDictionarySettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$VpnSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$WifiP2pSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$WifiSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.Settings$WirelessSettingsActivity: void onBuildHeaders (java.util.List)> (2)
<com.android.settings.SubSettings: void onBuildHeaders (java.util.List)> (2)
<com.android.contacts.ContactsApplication: java.lang.Object getSystemService (java.lang.String)> (3)
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.AccountTypeManager getInstance (android.content.Context)> (55)
<com.android.contacts.model.AccountTypeManagerImpl: com.android.contacts.model.AccountTypeManager createAccountTypeManager (android.content.Context)> (1)
<com.android.settings.LocationSettings: void onStart ()> (3)
<com.android.settings.TetherSettings: void onStart ()> (3)
<com.android.contacts.list.ContactEntryListFragment: void prepareEmptyView ()> (4)
<com.android.contacts.list.DefaultContactBrowseListFragment: void prepareEmptyView ()> (2)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void onWatchdogAlarm ()> (1)
<com.android.email.service.AttachmentDownloadService: void run ()> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onResume ()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume ()> (4)
<android.accounts.AccountManager$Future2Task: android.accounts.AccountManager$Future2Task start ()> (4)
<com.android.browser.Controller: void start (android.content.Intent)> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run ()> (1)
<com.android.email.service.MailService$6: void run (java.lang.Object)> (1)
<com.android.email.service.MailService: void reconcilePopImapAccountsSync (android.content.Context)> (3)
<com.android.internal.policy.impl.LockPatternKeyguardViewProperties: com.android.internal.policy.impl.KeyguardViewBase createKeyguardView (android.content.Context,com.android.internal.policy.impl.KeyguardViewCallback,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardWindowController)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: com.android.contacts.model.EntityDelta addEditableRawContact (android.content.Context,com.android.contacts.model.EntityDeltaList)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void onCreate (android.os.Bundle)> (1)
<com.android.contacts.activities.ContactEditorAccountsChangedActivity: void onCreate (android.os.Bundle)> (1)
<com.android.contacts.activities.GroupDetailActivity: boolean onPrepareOptionsMenu (android.view.Menu)> (3)
<com.android.contacts.ContactLoader$Result: long getFirstWritableRawContactId (android.content.Context)> (1)
<com.android.contacts.ContactLoader: void loadInvitableAccountTypes (com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.ContactLoader: void postViewNotificationToSyncAdapter ()> (1)
<com.android.contacts.ContactsApplication$DelayedInitializer: java.lang.Void doInBackground (java.lang.Void[])> (1)
<com.android.contacts.ContactSaveService: void saveContact (android.content.Intent)> (1)
<com.android.contacts.ContactsUtils: boolean areContactWritableAccountsAvailable (android.content.Context)> (1)
<com.android.contacts.ContactsUtils: boolean areGroupWritableAccountsAvailable (android.content.Context)> (3)
<com.android.contacts.detail.ContactDetailFragment$AddToMyContactsQuickFix: boolean isApplicable ()> (1)
<com.android.contacts.detail.ContactDetailFragment$AddToMyContactsQuickFix: void execute ()> (1)
<com.android.contacts.detail.ContactDetailFragment$MakeLocalCopyQuickFix: void execute ()> (1)
<com.android.contacts.detail.ContactDetailFragment: void buildEntries ()> (1)
<com.android.contacts.detail.ContactDetailUpdatesFragment: com.android.contacts.model.AccountType getAccountTypeForStreamItemEntry (com.android.contacts.util.StreamItemEntry)> (1)
<com.android.contacts.detail.PhotoSelectionHandler: com.android.contacts.model.EntityDeltaList getDeltaForAttachingPhotoToContact ()> (2)
<com.android.contacts.detail.StreamItemAdapter: android.view.View getView (int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.editor.AggregationSuggestionView: boolean canEditSuggestedContact ()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean hasPendingChanges ()> (3)
<com.android.contacts.editor.ContactEditorFragment: boolean isContactWritable ()> (1)
<com.android.contacts.editor.ContactEditorFragment$EntityDeltaComparator: int compare (com.android.contacts.model.EntityDelta,com.android.contacts.model.EntityDelta)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditors ()> (4)
<com.android.contacts.editor.ContactEditorFragment: void createContact (com.android.contacts.model.AccountWithDataSet)> (4)
<com.android.contacts.editor.ContactEditorFragment: void createContact ()> (1)
<com.android.contacts.editor.ContactEditorFragment: void rebindEditorsForNewContact (com.android.contacts.model.EntityDelta,com.android.contacts.model.AccountWithDataSet,com.android.contacts.model.AccountWithDataSet)> (1)
<com.android.contacts.editor.ContactEditorFragment: void setData (com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.editor.ContactEditorFragment: void setIntentExtras (android.os.Bundle)> (2)
<com.android.contacts.editor.ContactEditorUtils: void <init> (android.content.Context)> (1)
<com.android.contacts.group.GroupBrowseListAdapter: void <init> (android.content.Context)> (1)
<com.android.contacts.group.GroupDetailDisplayUtils: void bindGroupSourceView (android.content.Context,android.view.View,java.lang.String,java.lang.String)> (2)
<com.android.contacts.group.GroupDetailFragment: void onAttach (android.app.Activity)> (1)
<com.android.contacts.group.GroupDetailFragment: void updateAccountType (java.lang.String,java.lang.String)> (1)
<com.android.contacts.group.GroupEditorFragment: com.android.contacts.model.AccountType getAccountType ()> (2)
<com.android.contacts.group.GroupEditorFragment: void selectAccountAndCreateGroup ()> (1)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished (android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.interactions.ImportExportDialogFragment: boolean handleImportRequest (int)> (1)
<com.android.contacts.interactions.PhoneNumberInteraction$PhoneItemAdapter: void <init> (android.content.Context,java.util.List,com.android.contacts.interactions.PhoneNumberInteraction$InteractionType)> (1)
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: void <init> (android.content.Context,java.util.List,com.android.contacts.list.ContactListFilter)> (1)
<com.android.contacts.list.AccountFilterActivity: java.util.List loadAccountFilters (android.content.Context)> (1)
<com.android.contacts.list.ContactListFilterControllerImpl: boolean filterAccountExists ()> (1)
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.list.CustomContactListFilterActivity$AccountSet loadInBackground ()> (1)
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: void <init> (android.content.Context)> (1)
<com.android.contacts.model.AccountTypeManagerImpl: com.android.contacts.model.AccountTypeManager getInstance (android.content.Context)> (1)
<com.android.contacts.model.EntityDelta: com.android.contacts.model.AccountType getRawContactAccountType (android.content.Context)> (3)
<com.android.contacts.quickcontact.QuickContactActivity: void bindData (com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.socialwidget.SocialWidgetProvider: void setDisplayNameAndSnippet (android.content.Context,android.widget.RemoteViews,java.lang.CharSequence,java.lang.CharSequence,java.util.List,android.app.PendingIntent)> (1)
<com.android.contacts.SplitAggregateView: void <init> (android.content.Context,android.net.Uri)> ()
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog (android.content.Context,int,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener)> (4)
<com.android.contacts.util.AccountsListAdapter: void <init> (android.content.Context,com.android.contacts.util.AccountsListAdapter$AccountListFilter,com.android.contacts.model.AccountWithDataSet)> (2)
<com.android.contacts.vcard.ImportVCardActivity: void onCreate (android.os.Bundle)> (3)
<com.android.contacts.vcard.NfcImportVCardActivity: void onCreate (android.os.Bundle)> (1)
<com.android.contacts.vcard.SelectAccountActivity: void onCreate (android.os.Bundle)> (3)
<com.android.contacts.list.EmailAddressPickerFragment: void prepareEmptyView ()> (1)
<com.android.contacts.list.JoinContactListFragment: void prepareEmptyView ()> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void prepareEmptyView ()> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void prepareEmptyView ()> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void access$800 (com.android.email.service.AttachmentDownloadService$DownloadSet)> (1)
<android.accounts.AccountManager$1: android.accounts.AccountManager$Future2Task start ()> (2)
<android.accounts.AccountManager$2: android.accounts.AccountManager$Future2Task start ()> (2)
<android.accounts.AccountManager$3: android.accounts.AccountManager$Future2Task start ()> (2)
<android.accounts.AccountManager$4: android.accounts.AccountManager$Future2Task start ()> (2)
<com.android.browser.ActivityController: void start (android.content.Intent)> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyRunnable: void run ()> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onSystemAccountChanged ()> (1)
<com.android.email.service.MailService$1: void run ()> (1)
<com.android.internal.policy.impl.KeyguardViewProperties: com.android.internal.policy.impl.KeyguardViewBase createKeyguardView (android.content.Context,com.android.internal.policy.impl.KeyguardViewCallback,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardWindowController)> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity: void setEntityDeltaList (com.android.contacts.model.EntityDeltaList)> (1)
<com.android.contacts.activities.TransactionSafeActivity: boolean onPrepareOptionsMenu (android.view.Menu)> (1)
<com.android.contacts.ContactsActivity: boolean onPrepareOptionsMenu (android.view.Menu)> (2)
<com.android.contacts.ContactLoader$Result: boolean isWritableContact (android.content.Context)> (3)
<com.android.contacts.ContactLoader: com.android.contacts.ContactLoader$Result loadInBackground ()> (1)
<com.android.contacts.ContactLoader: void deliverResult (com.android.contacts.ContactLoader$Result)> (2)
<com.android.contacts.ContactsApplication$DelayedInitializer: java.lang.Object doInBackground (java.lang.Object[])> (1)
<com.android.contacts.ContactSaveService: void onHandleIntent (android.content.Intent)> (1)
<com.android.contacts.activities.PeopleActivity: boolean areContactWritableAccountsAvailable ()> (1)
<com.android.contacts.activities.PeopleActivity: boolean areGroupWritableAccountsAvailable ()> (4)
<com.android.contacts.group.GroupBrowseListFragment: android.view.View onCreateView (android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.contacts.group.GroupBrowseListFragment: void bindGroupList ()> (1)
<com.android.contacts.detail.ContactDetailFragment$QuickFix: boolean isApplicable ()> (1)
<com.android.contacts.detail.ContactDetailFragment$QuickFix: void execute ()> (1)
<com.android.contacts.detail.ContactDetailFragment: void bindData ()> (2)
<com.android.contacts.detail.ContactDetailUpdatesFragment: com.android.contacts.model.AccountType access$000 (com.android.contacts.detail.ContactDetailUpdatesFragment,com.android.contacts.util.StreamItemEntry)> (2)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: com.android.contacts.model.EntityDeltaList getDeltaForAttachingPhotoToContact ()> (2)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: com.android.contacts.model.EntityDeltaList getDeltaForAttachingPhotoToContact ()> (1)
<com.android.contacts.editor.AggregationSuggestionView: boolean handleItemClickEvent ()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean doJoinContactAction ()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean revert ()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean save (int)> (7)
<com.android.contacts.editor.ContactEditorFragment: void showJoinAggregateActivity (android.net.Uri)> (1)
<com.android.contacts.editor.ContactEditorFragment$EntityDeltaComparator: int compare (java.lang.Object,java.lang.Object)> (1)
<com.android.contacts.editor.ContactEditorFragment: android.view.View onCreateView (android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.contacts.editor.ContactEditorFragment: void access$2100 (com.android.contacts.editor.ContactEditorFragment)> (3)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForExistingContact (com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForNewContact (com.android.contacts.model.AccountWithDataSet,com.android.contacts.model.AccountType,com.android.contacts.model.EntityDelta,com.android.contacts.model.AccountType)> (2)
<com.android.contacts.editor.ContactEditorFragment: void onActivityCreated (android.os.Bundle)> (1)
<com.android.contacts.editor.ContactEditorFragment: void onActivityResult (int,int,android.content.Intent)> (1)
<com.android.contacts.editor.ContactEditorFragment: void selectAccountAndCreateContact ()> (1)
<com.android.contacts.editor.ContactEditorFragment: void access$500 (com.android.contacts.editor.ContactEditorFragment,com.android.contacts.model.EntityDelta,com.android.contacts.model.AccountWithDataSet,com.android.contacts.model.AccountWithDataSet)> (1)
<com.android.contacts.editor.ContactEditorFragment$4: void onLoadFinished (android.content.Loader,com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onNewIntent (android.content.Intent)> (3)
<com.android.contacts.editor.ContactEditorUtils: com.android.contacts.editor.ContactEditorUtils getInstance (android.content.Context)> (2)
<com.android.contacts.group.GroupDetailFragment: void bindGroupMetaData (android.database.Cursor)> (1)
<com.android.contacts.group.GroupEditorFragment: boolean isGroupMembershipEditable ()> (2)
<com.android.contacts.group.GroupEditorFragment: void setupEditorForAccount ()> (4)
<com.android.contacts.group.GroupEditorFragment: void onActivityCreated (android.os.Bundle)> (1)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished (android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.interactions.ImportExportDialogFragment: boolean access$000 (com.android.contacts.interactions.ImportExportDialogFragment,int)> (1)
<com.android.contacts.interactions.PhoneNumberInteraction$PhoneDisambiguationDialogFragment: android.app.Dialog onCreateDialog (android.os.Bundle)> (1)
<com.android.contacts.list.AccountFilterActivity$MyLoaderCallbacks: void onLoadFinished (android.content.Loader,java.util.List)> (1)
<com.android.contacts.list.AccountFilterActivity: java.util.List access$100 (android.content.Context)> (1)
<com.android.contacts.list.ContactListFilterControllerImpl: void checkFilterValidity (boolean)> (2)
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: java.lang.Object loadInBackground ()> (1)
<com.android.contacts.list.CustomContactListFilterActivity: void onCreate (android.os.Bundle)> (3)
<com.android.contacts.activities.AttachPhotoActivity: void saveContact (com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.model.EntityDeltaList: int indexOfFirstWritableRawContact (android.content.Context)> (2)
<com.android.contacts.quickcontact.QuickContactActivity: void access$700 (com.android.contacts.quickcontact.QuickContactActivity,com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.socialwidget.SocialWidgetProvider: void bindRemoteViews (android.content.Context,int,android.appwidget.AppWidgetManager,com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog (android.content.Context,int,android.content.DialogInterface$OnClickListener)> ()
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog (android.content.Context,int)> ()
<com.android.contacts.vcard.ImportVCardActivity: android.app.Dialog onCreateDialog (int,android.os.Bundle)> (3)
<com.android.contacts.vcard.SelectAccountActivity: android.app.Dialog onCreateDialog (int,android.os.Bundle)> (3)
<com.android.contacts.editor.ContactEditorFragment$3: void onClick (android.view.View)> (1)
<com.android.contacts.util.AccountsListAdapter: void <init> (android.content.Context,com.android.contacts.util.AccountsListAdapter$AccountListFilter)> (2)
<com.android.contacts.activities.TransactionSafeActivity: void onCreate (android.os.Bundle)> (3)
<com.android.contacts.ContactsActivity: void onCreate (android.os.Bundle)> (19)
<com.android.email.service.AttachmentDownloadService: void watchdogAlarm ()> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel (java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures (android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures (java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount (android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (5)
<com.android.browser.BrowserActivity: void onCreate (android.os.Bundle)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent (android.content.Intent)> (1)
<com.android.internal.policy.impl.KeyguardViewManager: void show ()> (2)
<com.android.contacts.activities.ConfirmAddDetailActivity: void access$300 (com.android.contacts.activities.ConfirmAddDetailActivity,com.android.contacts.model.EntityDeltaList)> (1)
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: android.view.View getHeaderEntryView (android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.detail.ContactDetailTabCarousel: void loadData (com.android.contacts.ContactLoader$Result)> (2)
<com.android.contacts.ContactLoader: java.lang.Object loadInBackground ()> (1)
<com.android.contacts.ContactLoader: void deliverResult (java.lang.Object)> (2)
<com.android.contacts.ContactLoader: void onStartLoading ()> (1)
<com.android.contacts.activities.PeopleActivity: void updateViewConfiguration (boolean)> (2)
<com.android.contacts.activities.PeopleActivity: boolean access$300 (com.android.contacts.activities.PeopleActivity)> (1)
<com.android.contacts.activities.PeopleActivity: boolean onPrepareOptionsMenu (android.view.Menu)> (3)
<com.android.contacts.activities.PeopleActivity: void showEmptyStateForTab (int)> (3)
<com.android.contacts.activities.PeopleActivity: void updateFragmentsVisibility ()> (3)
<com.android.contacts.group.GroupBrowseListFragment: void access$400 (com.android.contacts.group.GroupBrowseListFragment)> (1)
<com.android.contacts.detail.ContactDetailFragment: void configureQuickFix ()> (1)
<com.android.contacts.detail.ContactDetailFragment$3: void onClick (android.view.View)> (1)
<com.android.contacts.detail.ContactDetailFragment: android.view.View onCreateView (android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.contacts.detail.ContactDetailFragment: void setData (android.net.Uri,com.android.contacts.ContactLoader$Result)> (3)
<com.android.contacts.detail.ContactDetailUpdatesFragment$1: void onClick (android.view.View)> (1)
<com.android.contacts.detail.ContactDetailUpdatesFragment$2: void onClick (android.view.View)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: void onPhotoSelected (android.graphics.Bitmap)> (1)
<com.android.contacts.editor.ContactEditorFragment$1: void onItemClick (android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean onOptionsItemSelected (android.view.MenuItem)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onBackPressed ()> (3)
<com.android.contacts.editor.ContactEditorFragment: void doJoinSuggestedContact (long[])> (1)
<com.android.contacts.editor.ContactEditorFragment: void doSaveAction ()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onSplitContactConfirmed ()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onStop ()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onSaveCompleted (boolean,int,boolean,android.net.Uri)> (3)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onPhotoSelected (android.graphics.Bitmap)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onRemovePictureChosen ()> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onUseAsPrimaryChosen ()> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForNewContact (com.android.contacts.model.AccountWithDataSet,com.android.contacts.model.AccountType)> (1)
<com.android.contacts.editor.ContactEditorFragment$3$1: void onItemClick (android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.ContactEditorFragment$4: void onLoadFinished (android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.activities.TransactionSafeActivity: void onNewIntent (android.content.Intent)> (1)
<com.android.contacts.ContactsActivity: void onNewIntent (android.content.Intent)> (5)
<com.android.contacts.editor.ContactEditorFragment: void onAttach (android.app.Activity)> (1)
<com.android.contacts.group.GroupDetailFragment: void access$400 (com.android.contacts.group.GroupDetailFragment,android.database.Cursor)> (1)
<com.android.contacts.group.GroupEditorFragment: void onDoneClicked ()> (1)
<com.android.contacts.group.GroupEditorFragment: void bindGroupMetaData (android.database.Cursor)> (1)
<com.android.contacts.group.GroupEditorFragment: void onAccountChosen (com.android.contacts.model.AccountWithDataSet,android.os.Bundle)> (1)
<com.android.contacts.interactions.ImportExportDialogFragment$2: void onClick (android.content.DialogInterface,int)> (1)
<com.android.contacts.list.AccountFilterActivity$MyLoaderCallbacks: void onLoadFinished (android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.AccountFilterActivity$FilterLoader: java.util.List loadInBackground ()> (1)
<com.android.contacts.list.ContactListFilterControllerImpl: void <init> (android.content.Context)> (1)
<com.android.contacts.list.ContactListFilterController: void checkFilterValidity (boolean)> (4)
<com.android.contacts.activities.AttachPhotoActivity: void access$000 (com.android.contacts.activities.AttachPhotoActivity,com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.detail.PhotoSelectionHandler: int getWritableEntityIndex ()> (5)
<com.android.contacts.model.EntityDeltaList: com.android.contacts.model.EntityDelta getFirstWritableRawContact (android.content.Context)> (2)
<com.android.contacts.quickcontact.QuickContactActivity$5: void onLoadFinished (android.content.Loader,com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.socialwidget.SocialWidgetProvider: void access$000 (android.content.Context,int,android.appwidget.AppWidgetManager,com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.activities.TransactionSafeActivity: android.app.Dialog onCreateDialog (int,android.os.Bundle)> (1)
<com.android.contacts.ContactsActivity: android.app.Dialog onCreateDialog (int,android.os.Bundle)> (4)
<com.android.contacts.editor.SelectAccountDialogFragment: android.app.Dialog onCreateDialog (android.os.Bundle)> (1)
<com.android.contacts.activities.DialtactsActivity: void onCreate (android.os.Bundle)> (2)
<com.android.contacts.activities.AttachPhotoActivity: void onCreate (android.os.Bundle)> (3)
<com.android.contacts.activities.ContactDetailActivity: void onCreate (android.os.Bundle)> (3)
<com.android.contacts.activities.ContactEditorActivity: void onCreate (android.os.Bundle)> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onCreate (android.os.Bundle)> (3)
<com.android.contacts.activities.GroupBrowserActivity: void onCreate (android.os.Bundle)> (3)
<com.android.contacts.activities.GroupDetailActivity: void onCreate (android.os.Bundle)> (3)
<com.android.contacts.activities.GroupEditorActivity: void onCreate (android.os.Bundle)> (3)
<com.android.contacts.activities.JoinContactActivity: void onCreate (android.os.Bundle)> (3)
<com.android.contacts.activities.NonPhoneActivity: void onCreate (android.os.Bundle)> (3)
<com.android.contacts.activities.PeopleActivity: void onCreate (android.os.Bundle)> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void onCreate (android.os.Bundle)> (3)
<com.android.contacts.CallContactActivity: void onCreate (android.os.Bundle)> (3)
<com.android.contacts.list.AccountFilterActivity: void onCreate (android.os.Bundle)> (3)
<com.android.contacts.test.FragmentTestActivity: void onCreate (android.os.Bundle)> (3)
<com.android.email.service.AttachmentDownloadService$Watchdog$1: void run ()> (1)
<android.accounts.GrantCredentialsPermissionActivity: void onCreate (android.os.Bundle)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel (java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture hasFeatures (android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$2: void onClick (android.content.DialogInterface,int)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void doWork ()> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture removeAccount (android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester: boolean onContextItemSelected (android.view.MenuItem)> (1)
<com.android.email.provider.AccountReconciler: boolean reconcileAccountsInternal (android.content.Context,java.util.List,android.accounts.Account[],android.content.Context,boolean)> (2)
<com.android.settings.accounts.AccountSyncSettings$1: void onClick (android.content.DialogInterface,int)> (1)
<com.android.internal.policy.impl.KeyguardViewManager: void verifyUnlock ()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleShow ()> (1)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: void onPostExecute (com.android.contacts.model.EntityDeltaList)> (1)
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: android.view.View getView (int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.detail.ContactDetailLayoutController: void showContactWithUpdates (boolean)> (2)
<com.android.contacts.detail.ContactDetailLayoutController: void showEmptyState ()> (1)
<com.android.contacts.activities.PeopleActivity: void onProviderStatusChange ()> (1)
<com.android.contacts.activities.PeopleActivity: void onResume ()> (3)
<com.android.contacts.activities.PeopleActivity$TabPagerListener: void onPageSelected (int)> (1)
<com.android.contacts.activities.PeopleActivity: void access$200 (com.android.contacts.activities.PeopleActivity,int)> (1)
<com.android.contacts.activities.PeopleActivity: void onAction (int)> (1)
<com.android.contacts.activities.PeopleActivity: void onSelectedTabChanged ()> (1)
<com.android.contacts.group.GroupBrowseListFragment$3: void onLoadFinished (android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.detail.ContactDetailFragment: void showEmptyState ()> (1)
<com.android.contacts.detail.ContactDetailLayoutController: void showContactWithoutUpdates ()> (2)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onPhotoSelected (android.graphics.Bitmap)> (1)
<com.android.contacts.activities.TransactionSafeActivity: void onBackPressed ()> (2)
<com.android.contacts.ContactsActivity: void onBackPressed ()> (4)
<com.android.contacts.editor.ContactEditorFragment$JoinSuggestedContactDialogFragment$1: void onClick (android.content.DialogInterface,int)> (1)
<com.android.contacts.activities.ContactEditorActivity$1: void onClick (android.view.View)> (1)
<com.android.contacts.editor.SplitContactConfirmationDialogFragment$Listener: void onSplitContactConfirmed ()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onJoinCompleted (android.net.Uri)> (1)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onRemovePictureChosen ()> (2)
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onUseAsPrimaryChosen ()> (2)
<com.android.contacts.activities.GroupEditorActivity: void onNewIntent (android.content.Intent)> (3)
<com.android.contacts.ContactsActivity: void onServiceCompleted (android.content.Intent)> (18)
<com.android.contacts.group.GroupDetailFragment$2: void onLoadFinished (android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.activities.GroupEditorActivity$1: void onClick (android.view.View)> (1)
<com.android.contacts.group.GroupEditorFragment: void access$600 (com.android.contacts.group.GroupEditorFragment,android.database.Cursor)> (1)
<com.android.contacts.editor.SelectAccountDialogFragment$Listener: void onAccountChosen (com.android.contacts.model.AccountWithDataSet,android.os.Bundle)> (1)
<com.android.contacts.list.AccountFilterActivity$FilterLoader: java.lang.Object loadInBackground ()> (1)
<com.android.contacts.list.ContactListFilterController: com.android.contacts.list.ContactListFilterController createContactListFilterController (android.content.Context)> (2)
<com.android.contacts.activities.PeopleActivity: void onNewIntent (android.content.Intent)> (3)
<com.android.contacts.activities.PeopleActivity: void onStart ()> (3)
<com.android.contacts.model.AccountTypeManagerImpl$1: void run ()> (1)
<com.android.contacts.activities.AttachPhotoActivity$1: void onContactLoaded (com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: int getWritableEntityIndex ()> (1)
<com.android.contacts.detail.PhotoSelectionHandler: long getWritableEntityId ()> (2)
<com.android.contacts.detail.PhotoSelectionHandler: void onClick (android.view.View)> (3)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: int getWritableEntityIndex ()> (1)
<com.android.contacts.quickcontact.QuickContactActivity$5: void onLoadFinished (android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.socialwidget.SocialWidgetProvider$1: void onLoadComplete (android.content.Loader,com.android.contacts.ContactLoader$Result)> (1)
<android.accounts.AccountManager$AmsTask: void doWork ()> (2)
<com.android.email.provider.AccountReconciler: boolean accountsNeedReconciling (android.content.Context,java.util.List,android.accounts.Account[])> (1)
<com.android.email.provider.AccountReconciler: void reconcileAccounts (android.content.Context,java.util.List,android.accounts.Account[],android.content.Context)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleVerifyUnlock ()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1200 (com.android.internal.policy.impl.KeyguardViewMediator)> (3)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryEntitiesTask: void onPostExecute (java.lang.Object)> (1)
<com.android.contacts.detail.ContactDetailLayoutController: void initialize (android.os.Bundle)> (1)
<com.android.contacts.detail.ContactDetailLayoutController: void setContactData (com.android.contacts.ContactLoader$Result)> (2)
<com.android.contacts.activities.PeopleActivity$ContactDetailLoaderFragmentListener: void onDetailsLoaded (com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.list.ProviderStatusWatcher$ProviderStatusListener: void onProviderStatusChange ()> (1)
<com.android.contacts.activities.TransactionSafeActivity: void onResume ()> (19)
<com.android.contacts.ContactsActivity: void onResume ()> (3)
<com.android.contacts.activities.ActionBarAdapter$Listener: void onAction (int)> (2)
<com.android.contacts.activities.ActionBarAdapter$Listener: void onSelectedTabChanged ()> (2)
<com.android.contacts.group.GroupBrowseListFragment$3: void onLoadFinished (android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.detail.PhotoSelectionHandler: boolean handlePhotoActivityResult (int,int,android.content.Intent)> (2)
<com.android.contacts.activities.DialtactsActivity: void onBackPressed ()> (2)
<com.android.contacts.activities.GroupEditorActivity: void onBackPressed ()> (3)
<com.android.contacts.activities.PeopleActivity: void onBackPressed ()> (5)
<com.android.contacts.editor.SplitContactConfirmationDialogFragment$1: void onClick (android.content.DialogInterface,int)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: void onRemovePictureChosen ()> (1)
<com.android.contacts.editor.PhotoActionPopup$Listener: void onRemovePictureChosen ()> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: void onUseAsPrimaryChosen ()> (1)
<com.android.contacts.editor.PhotoActionPopup$Listener: void onUseAsPrimaryChosen ()> (1)
<com.android.contacts.activities.AttachPhotoActivity: void onServiceCompleted (android.content.Intent)> (1)
<com.android.contacts.activities.ContactDetailActivity: void onServiceCompleted (android.content.Intent)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onServiceCompleted (android.content.Intent)> (1)
<com.android.contacts.activities.ContactSelectionActivity: void onServiceCompleted (android.content.Intent)> (1)
<com.android.contacts.activities.GroupBrowserActivity: void onServiceCompleted (android.content.Intent)> (1)
<com.android.contacts.activities.GroupDetailActivity: void onServiceCompleted (android.content.Intent)> (1)
<com.android.contacts.activities.GroupEditorActivity: void onServiceCompleted (android.content.Intent)> (1)
<com.android.contacts.activities.JoinContactActivity: void onServiceCompleted (android.content.Intent)> (1)
<com.android.contacts.activities.NonPhoneActivity: void onServiceCompleted (android.content.Intent)> (1)
<com.android.contacts.activities.PeopleActivity: void onServiceCompleted (android.content.Intent)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onServiceCompleted (android.content.Intent)> (1)
<com.android.contacts.CallContactActivity: void onServiceCompleted (android.content.Intent)> (1)
<com.android.contacts.ContactSaveService$Listener: void onServiceCompleted (android.content.Intent)> (1)
<com.android.contacts.list.AccountFilterActivity: void onServiceCompleted (android.content.Intent)> (1)
<com.android.contacts.list.CustomContactListFilterActivity: void onServiceCompleted (android.content.Intent)> (1)
<com.android.contacts.test.FragmentTestActivity: void onServiceCompleted (android.content.Intent)> (1)
<com.android.contacts.vcard.ImportVCardActivity: void onServiceCompleted (android.content.Intent)> (1)
<com.android.contacts.vcard.SelectAccountActivity: void onServiceCompleted (android.content.Intent)> (1)
<com.android.contacts.group.GroupDetailFragment$2: void onLoadFinished (android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.group.GroupEditorFragment$2: void onLoadFinished (android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.editor.SelectAccountDialogFragment: void onAccountSelected (com.android.contacts.model.AccountWithDataSet)> (1)
<com.android.contacts.list.ContactListFilterControllerImpl: com.android.contacts.list.ContactListFilterController createContactListFilterController (android.content.Context)> (1)
<com.android.contacts.activities.TransactionSafeActivity: void onStart ()> (18)
<com.android.contacts.ContactsActivity: void onStart ()> (4)
<com.android.contacts.activities.AttachPhotoActivity$Listener: void onContactLoaded (com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: long getWritableEntityId ()> (2)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: long getWritableEntityId ()> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: void onClick (android.view.View)> (3)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: void onClick (android.view.View)> (2)
<com.android.contacts.socialwidget.SocialWidgetProvider$1: void onLoadComplete (android.content.Loader,java.lang.Object)> (1)
<android.accounts.AccountManager$AmsTask: android.accounts.AccountManagerFuture start ()> (7)
<android.accounts.AccountManager$AmsTask$Response: void onResult (android.os.Bundle)> (2)
<com.android.email.service.MailService: void reconcileAccountsWithAccountManager (android.content.Context,java.util.List,android.accounts.Account[],android.content.Context)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1500 (com.android.internal.policy.impl.KeyguardViewMediator)> (6)
<com.android.internal.policy.impl.KeyguardViewMediator: void showLocked ()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock (int)> (2)
<com.android.contacts.detail.ContactDetailLayoutController: void <init> (android.app.Activity,android.os.Bundle,android.app.FragmentManager,com.android.contacts.widget.TransitionAnimationView,android.view.View,com.android.contacts.detail.ContactDetailFragment$Listener)> (2)
<com.android.contacts.activities.ContactDetailActivity$3$1: void run ()> (1)
<com.android.contacts.activities.PeopleActivity$ContactDetailLoaderFragmentListener$1: void run ()> (1)
<com.android.contacts.detail.ContactLoaderFragment$ContactLoaderFragmentListener: void onDetailsLoaded (com.android.contacts.ContactLoader$Result)> (2)
<com.android.contacts.list.ProviderStatusWatcher: void notifyListeners ()> (1)
<com.android.contacts.activities.AttachPhotoActivity: void onResume ()> (3)
<com.android.contacts.activities.ContactDetailActivity: void onResume ()> (3)
<com.android.contacts.activities.ContactEditorActivity: void onResume ()> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onResume ()> (3)
<com.android.contacts.activities.DialtactsActivity: void onResume ()> (2)
<com.android.contacts.activities.GroupBrowserActivity: void onResume ()> (3)
<com.android.contacts.activities.GroupDetailActivity: void onResume ()> (3)
<com.android.contacts.activities.GroupEditorActivity: void onResume ()> (3)
<com.android.contacts.activities.JoinContactActivity: void onResume ()> (3)
<com.android.contacts.activities.NonPhoneActivity: void onResume ()> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void onResume ()> (3)
<com.android.contacts.CallContactActivity: void onResume ()> (3)
<com.android.contacts.list.AccountFilterActivity: void onResume ()> (3)
<com.android.contacts.list.CustomContactListFilterActivity: void onResume ()> (3)
<com.android.contacts.test.FragmentTestActivity: void onResume ()> (3)
<com.android.contacts.vcard.ImportVCardActivity: void onResume ()> (3)
<com.android.contacts.vcard.SelectAccountActivity: void onResume ()> (3)
<com.android.contacts.activities.ActionBarAdapter: boolean onQueryTextChange (java.lang.String)> (1)
<com.android.contacts.activities.ActionBarAdapter: void update ()> (2)
<com.android.contacts.activities.ActionBarAdapter: void setCurrentTab (int,boolean)> (2)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: boolean handlePhotoActivityResult (int,int,android.content.Intent)> (2)
<com.android.contacts.activities.PeopleActivity: boolean onOptionsItemSelected (android.view.MenuItem)> (3)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onFinishAction ()> (1)
<com.android.contacts.editor.PhotoActionPopup$1: void onItemClick (android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.ContactSaveService: void deliverCallbackOnUiThread (android.content.Intent)> (1)
<com.android.contacts.group.GroupEditorFragment$2: void onLoadFinished (android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.editor.SelectAccountDialogFragment: void access$000 (com.android.contacts.editor.SelectAccountDialogFragment,com.android.contacts.model.AccountWithDataSet)> (1)
<com.android.contacts.activities.AttachPhotoActivity: void onStart ()> (3)
<com.android.contacts.activities.ContactDetailActivity: void onStart ()> (3)
<com.android.contacts.activities.ContactEditorActivity: void onStart ()> (3)
<com.android.contacts.activities.ContactSelectionActivity: void onStart ()> (3)
<com.android.contacts.activities.DialtactsActivity: void onStart ()> (2)
<com.android.contacts.activities.GroupBrowserActivity: void onStart ()> (3)
<com.android.contacts.activities.GroupDetailActivity: void onStart ()> (3)
<com.android.contacts.activities.GroupEditorActivity: void onStart ()> (3)
<com.android.contacts.activities.JoinContactActivity: void onStart ()> (3)
<com.android.contacts.activities.NonPhoneActivity: void onStart ()> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void onStart ()> (3)
<com.android.contacts.CallContactActivity: void onStart ()> (3)
<com.android.contacts.list.AccountFilterActivity: void onStart ()> (3)
<com.android.contacts.test.FragmentTestActivity: void onStart ()> (3)
<com.android.contacts.vcard.ImportVCardActivity: void onStart ()> (3)
<com.android.contacts.vcard.SelectAccountActivity: void onStart ()> (3)
<com.android.contacts.list.CustomContactListFilterActivity: void onStart ()> (3)
<com.android.contacts.activities.AttachPhotoActivity$2: void onLoadComplete (android.content.Loader,com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: long access$1600 (com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler)> (1)
<com.android.contacts.activities.PhotoSelectionActivity$4: void onAnimationEnd (android.animation.Animator)> (1)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: void onRequest (int)> (1)
<android.accounts.AccountManager$10: android.accounts.AccountManagerFuture start ()> (2)
<android.accounts.AccountManager$5: android.accounts.AccountManagerFuture start ()> (2)
<android.accounts.AccountManager$6: android.accounts.AccountManagerFuture start ()> (2)
<android.accounts.AccountManager$7: android.accounts.AccountManagerFuture start ()> (2)
<android.accounts.AccountManager$8: android.accounts.AccountManagerFuture start ()> (2)
<android.accounts.AccountManager$9: android.accounts.AccountManagerFuture start ()> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: android.accounts.AccountManagerFuture start ()> (2)
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onResult (android.os.Bundle)> ()
<com.android.internal.policy.impl.KeyguardViewMediator: void resetStateLocked ()> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlockLocked ()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void hideLocked ()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguardLocked ()> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void setKeyguardEnabled (boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock (int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock ()> (4)
<com.android.contacts.activities.PeopleActivity: void createViewsAndFragments (android.os.Bundle)> (1)
<com.android.contacts.detail.ContactLoaderFragment$1: void onLoadFinished (android.content.Loader,com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.detail.ContactLoaderFragment: void loadUri (android.net.Uri)> (2)
<com.android.contacts.list.ProviderStatusWatcher: void access$600 (com.android.contacts.list.ProviderStatusWatcher)> (1)
<com.android.contacts.activities.ActionBarAdapter: void initialize (android.os.Bundle,com.android.contacts.list.ContactsRequest)> (2)
<com.android.contacts.activities.ActionBarAdapter: void setSearchMode (boolean)> (6)
<com.android.contacts.activities.ActionBarAdapter: void setCurrentTab (int)> (3)
<com.android.contacts.activities.TransactionSafeActivity: boolean onOptionsItemSelected (android.view.MenuItem)> (1)
<com.android.contacts.ContactsActivity: boolean onOptionsItemSelected (android.view.MenuItem)> (7)
<com.android.contacts.list.OnContactBrowserActionListener: void onFinishAction ()> (1)
<com.android.contacts.ContactSaveService$2: void run ()> (1)
<com.android.contacts.editor.SelectAccountDialogFragment$1: void onClick (android.content.DialogInterface,int)> (1)
<com.android.contacts.activities.AttachPhotoActivity$2: void onLoadComplete (android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.editor.Editor$EditorListener: void onRequest (int)> (3)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties (java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken (android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (10)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken (android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount (java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (8)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials (android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials (android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures (java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOff (int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onSimStateChanged (com.android.internal.telephony.IccCard$State)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onUserSwitched (int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlock (android.view.WindowManagerPolicy$OnKeyguardExitResult)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$700 (com.android.internal.policy.impl.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void onSystemReady ()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void enableKeyguard (boolean)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$3: void pokeWakelock (int)> (3)
<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock ()> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void adjustUserActivityLocked ()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleWakeWhenReady (int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog ()> (1)
<com.android.contacts.detail.ContactLoaderFragment$1: void onLoadFinished (android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.activities.ContactDetailActivity: void onAttachFragment (android.app.Fragment)> (3)
<com.android.contacts.activities.PeopleActivity: void setupContactDetailFragment (android.net.Uri)> (1)
<com.android.contacts.list.ProviderStatusWatcher$LoaderTask: void onPostExecute (java.lang.Boolean)> (1)
<com.android.contacts.activities.ActionBarAdapter: boolean onClose ()> (1)
<com.android.contacts.activities.PeopleActivity: boolean onSearchRequested ()> (4)
<com.android.contacts.activities.PeopleActivity: void configureFragments (boolean)> (3)
<com.android.contacts.activities.ActionBarAdapter$MyNavigationListener: boolean onNavigationItemSelected (int,long)> (1)
<com.android.contacts.activities.ActionBarAdapter$MyTabListener: void onTabSelected (android.app.ActionBar$Tab,android.app.FragmentTransaction)> (1)
<com.android.contacts.activities.ContactSelectionActivity: boolean onOptionsItemSelected (android.view.MenuItem)> (3)
<com.android.contacts.activities.GroupDetailActivity: boolean onOptionsItemSelected (android.view.MenuItem)> (3)
<com.android.contacts.activities.JoinContactActivity: boolean onOptionsItemSelected (android.view.MenuItem)> (3)
<com.android.contacts.list.AccountFilterActivity: boolean onOptionsItemSelected (android.view.MenuItem)> (3)
<com.android.contacts.list.CustomContactListFilterActivity: boolean onOptionsItemSelected (android.view.MenuItem)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void finish ()> (2)
<com.android.contacts.editor.LabeledEditorView: void notifyEditorListener ()> (5)
<com.android.contacts.editor.LabeledEditorView: void onOptionalFieldVisibilityChange ()> (3)
<com.android.contacts.editor.PhotoEditorView$1: void onClick (android.view.View)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture editProperties (java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1: void onResult (android.os.Bundle)> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run (android.accounts.AccountManagerFuture)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void run (android.accounts.AccountManagerFuture)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken (android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.browser.DeviceAccountLogin: void login (int,com.android.browser.DeviceAccountLogin$AutoLoginCallback)> (1)
<com.android.browser.GoogleAccountLogin: void invalidateTokens ()> (1)
<com.android.browser.GoogleAccountLogin: void run (android.accounts.AccountManagerFuture)> (1)
<com.android.browser.GoogleAccountLogin: void startLogin ()> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken (android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken (android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.ChooseTypeAndAccountActivity: void runAddAccountForAuthenticator (java.lang.String)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture addAccount (java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.calendar.AllInOneActivity$QueryHandler: void onQueryComplete (int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.util.AccountPromptUtils: void launchAccountPrompt (android.app.Activity)> (1)
<com.android.email.service.MailService: void setupAccountManagerAccount (android.content.Context,com.android.emailcommon.provider.Account,boolean,boolean,boolean,android.accounts.AccountManagerCallback)> (1)
<com.android.settings.accounts.AddAccountSettings: void addAccount (java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentials (android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void next ()> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture updateCredentials (android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures (java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$3: void onClick (android.content.DialogInterface,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOff (int)> (2)
<com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback: void onSimStateChanged (com.android.internal.telephony.IccCard$State)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$300 (com.android.internal.policy.impl.KeyguardViewMediator,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void exitKeyguardSecurely (android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void launchHomeFromHotKey ()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator$3: void onReceive (android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguardTimeout ()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void systemReady ()> (1)
<android.view.WindowManagerPolicy: void enableKeyguard (boolean)> (3)
<com.android.internal.policy.impl.KeyguardScreenCallback: void pokeWakelock (int)> (14)
<com.android.internal.policy.impl.LockPatternKeyguardView$3: void takeEmergencyCallAction ()> (1)
<com.android.internal.policy.impl.KeyguardViewBase: boolean dispatchKeyEvent (android.view.KeyEvent)> (4)
<com.android.internal.policy.impl.LockPatternKeyguardView$3: void pokeWakelock ()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: boolean dispatchHoverEvent (android.view.MotionEvent)> (3)
<com.android.internal.policy.impl.LockPatternKeyguardView: void wakeWhenReadyTq (int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleHide ()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleSetHidden (boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1800 (com.android.internal.policy.impl.KeyguardViewMediator,int)> (9)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run ()> (1)
<com.android.contacts.activities.TransactionSafeActivity: void onAttachFragment (android.app.Fragment)> (1)
<com.android.contacts.ContactsActivity: void onAttachFragment (android.app.Fragment)> (2)
<com.android.contacts.activities.PeopleActivity: void access$700 (com.android.contacts.activities.PeopleActivity,android.net.Uri)> (2)
<com.android.contacts.list.ProviderStatusWatcher$LoaderTask: void onPostExecute (java.lang.Object)> (1)
<com.android.contacts.activities.TransactionSafeActivity: boolean onSearchRequested ()> (1)
<com.android.contacts.ContactsActivity: boolean onSearchRequested ()> (2)
<com.android.contacts.list.ContactEntryListFragment: void finish ()> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void finish ()> (2)
<com.android.contacts.editor.EventFieldEditorView: void notifyEditorListener ()> (1)
<com.android.contacts.editor.LabeledEditorView: void onFieldChanged (java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.PhoneticNameEditorView: void notifyEditorListener ()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void notifyEditorListener ()> (2)
<com.android.contacts.editor.TextFieldsEditorView: void notifyEditorListener ()> (1)
<com.android.contacts.editor.EventFieldEditorView: void onOptionalFieldVisibilityChange ()> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onOptionalFieldVisibilityChange ()> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onOptionalFieldVisibilityChange ()> (3)
<com.android.browser.AutologinBar: void onClick (android.view.View)> (1)
<com.android.browser.GoogleAccountLogin: void run ()> (1)
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken (android.accounts.Account,java.lang.String,boolean)> ()
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken (android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.email.activity.setup.AccountSetupOptions$1: void run ()> (1)
<com.android.settings.accounts.AddAccountSettings: void onActivityResult (int,int,android.content.Intent)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void run (android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void start ()> (1)
<android.view.WindowManagerPolicy: void screenTurnedOff (int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void init (android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs,android.os.LocalPowerManager)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void handleSimStateChange (com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (2)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void registerSimStateCallback (com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback)> (4)
<com.android.internal.policy.impl.KeyguardViewMediator$2: void onReceive (android.content.Context,android.content.Intent)> (1)
<android.view.WindowManagerPolicy: void exitKeyguardSecurely (android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: long interceptKeyBeforeDispatching (android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (2)
<com.android.internal.policy.impl.PhoneWindowManager$19: void run ()> (1)
<android.view.WindowManagerPolicy: void systemReady ()> (1)
<com.android.server.wm.WindowManagerService$1: void acquired ()> (1)
<com.android.server.wm.WindowManagerService$1: void released ()> (1)
<com.android.server.wm.WindowManagerService$2: void onReceive (android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen$2: void run (android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onTextChanged (java.lang.CharSequence,int,int,int)> (1)
<com.android.internal.policy.impl.FaceUnlock: void handleCancel ()> (1)
<com.android.internal.policy.impl.FaceUnlock: void handlePokeWakelock (int)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void userActivity (android.view.View)> (1)
<com.android.internal.policy.impl.LockScreen$WaveViewMethods: void onGrabbedStateChange (android.view.View,int)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternCellAdded (java.util.List)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternDetected (java.util.List)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen: boolean onKeyDown (int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.SimPukUnlockScreen$TouchInput: void onClick (android.view.View)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen: void onClick (android.view.View)> (1)
<com.android.internal.policy.impl.SimUnlockScreen$TouchInput: void onClick (android.view.View)> (1)
<com.android.internal.policy.impl.KeyguardScreenCallback: void takeEmergencyCallAction ()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView: boolean dispatchKeyEvent (android.view.KeyEvent)> (4)
<com.android.internal.policy.impl.KeyguardScreenCallback: void pokeWakelock ()> (14)
<com.android.internal.policy.impl.KeyguardViewBase: void wakeWhenReadyTq (int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1300 (com.android.internal.policy.impl.KeyguardViewMediator)> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleKeyguardDone (boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$2100 (com.android.internal.policy.impl.KeyguardViewMediator,boolean)> (12)
<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOffLocked ()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOnLocked (com.android.internal.policy.impl.KeyguardViewManager$ShowListener)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void wakeWhenReadyLocked (int)> (2)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onSelectionChange ()> (1)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onViewContactAction (android.net.Uri)> (1)
<com.android.contacts.list.ContactEntryListFragment: void onClose ()> (7)
<com.android.contacts.list.ContactPickerFragment: void finish ()> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void finish ()> (1)
<com.android.contacts.list.JoinContactListFragment: void finish ()> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void finish ()> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void finish ()> (1)
<com.android.contacts.editor.Editor: void onFieldChanged (java.lang.String,java.lang.String)> ()
<com.android.contacts.editor.EventFieldEditorView: void onFieldChanged (java.lang.String,java.lang.String)> (4)
<com.android.contacts.editor.TextFieldsEditorView: void onFieldChanged (java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.StructuredNameEditorView: void onFieldChanged (java.lang.String,java.lang.String)> (2)
<com.android.contacts.editor.StructuredNameEditorView: void onOptionalFieldVisibilityChange ()> (2)
<com.android.contacts.editor.TextFieldsEditorView$1: void onClick (android.view.View)> (1)
<com.android.server.PowerManagerService$4: void run ()> (1)
<android.view.WindowManagerPolicy: void init (android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs,android.os.LocalPowerManager)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void access$300 (com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void reportSimUnlocked ()> (2)
<com.android.internal.policy.impl.KeyguardStatusViewManager: void <init> (android.view.View,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardScreenCallback,boolean)> (6)
<com.android.internal.policy.impl.KeyguardStatusViewManager: void onResume ()> (6)
<com.android.internal.policy.impl.KeyguardViewMediator: void <init> (android.content.Context,com.android.internal.policy.impl.PhoneWindowManager,android.os.LocalPowerManager)> (1)
<com.android.internal.policy.impl.LockScreen: void onResume ()> (1)
<com.android.server.wm.WindowManagerService: void exitKeyguardSecurely (android.view.IOnKeyguardExitResult)> (2)
<android.view.WindowManagerPolicy: long interceptKeyBeforeDispatching (android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptFallback (android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.wm.WindowManagerService: void systemReady ()> (1)
<com.android.internal.widget.LockScreenWidgetCallback: void userActivity (android.view.View)> (1)
<com.android.internal.widget.WaveView$OnTriggerListener: void onGrabbedStateChange (android.view.View,int)> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternCellAdded (java.util.List)> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternDetected (java.util.List)> (1)
<com.android.internal.policy.impl.KeyguardStatusViewManager: void onClick (android.view.View)> (1)
<com.android.internal.policy.impl.FaceUnlock: void handleServiceConnected ()> (1)
<com.android.internal.policy.impl.LockScreen$GlowPadViewMethods: void onGrabbedStateChange (android.view.View,int)> (1)
<com.android.internal.policy.impl.LockScreen$GlowPadViewMethods: void onTrigger (android.view.View,int)> (1)
<com.android.internal.policy.impl.LockScreen$SlidingTabMethods: void onGrabbedStateChange (android.view.View,int)> (1)
<com.android.internal.policy.impl.LockScreen$SlidingTabMethods: void onTrigger (android.view.View,int)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen$2: void onClick (android.view.View)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen$3: void afterTextChanged (android.text.Editable)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen$4: void onClick (android.view.View)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onKeyDown (int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.SimUnlockScreen$1$1: void run ()> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void checkPin ()> (2)
<com.android.internal.policy.impl.SimUnlockScreen: void onClick (android.view.View)> (1)
<com.android.internal.policy.impl.KeyguardViewManager: boolean wakeWhenReadyTq (int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1900 (com.android.internal.policy.impl.KeyguardViewMediator,boolean)> (10)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone (boolean,boolean)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDoneDrawing ()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOn (com.android.internal.policy.impl.KeyguardViewManager$ShowListener)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean onWakeKeyWhenKeyguardShowingTq (int,boolean)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean onWakeMotionWhenKeyguardShowingTq ()> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onSelectionChange ()> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onViewContactAction (android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onClose ()> (1)
<com.android.contacts.list.ContactPickerFragment: void onClose ()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onClose ()> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onClose ()> (1)
<com.android.contacts.list.JoinContactListFragment: void onClose ()> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onClose ()> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onClose ()> (1)
<com.android.contacts.editor.EventFieldEditorView$2: void onDateSet (com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.EventFieldEditorView: void clearAllFields ()> ()
<com.android.contacts.editor.EventFieldEditorView: void onLabelRebuilt ()> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onFieldChanged (java.lang.String,java.lang.String)> (2)
<com.android.contacts.editor.TextFieldsEditorView$2: void afterTextChanged (android.text.Editable)> (1)
<com.android.server.wm.WindowManagerService$PolicyThread: void run ()> (2)
<com.android.internal.policy.impl.SimPukUnlockScreen$1$1: void run ()> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void <init> (android.content.Context,android.content.res.Configuration,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardScreenCallback,com.android.internal.widget.LockPatternUtils)> (1)
<com.android.internal.policy.impl.LockScreen: void <init> (android.content.Context,android.content.res.Configuration,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardScreenCallback)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void <init> (android.content.Context,android.content.res.Configuration,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardScreenCallback)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen: void <init> (android.content.Context,android.content.res.Configuration,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardScreenCallback,int)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen: void <init> (android.content.Context,android.content.res.Configuration,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardScreenCallback,com.android.internal.widget.LockPatternUtils)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void <init> (android.content.Context,android.content.res.Configuration,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardScreenCallback,com.android.internal.widget.LockPatternUtils)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onResume ()> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void onResume ()> (1)
<com.android.internal.policy.impl.PatternUnlockScreen: void onResume ()> (2)
<com.android.internal.policy.impl.SimPukUnlockScreen: void onResume ()> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void onResume ()> (1)
<com.android.internal.policy.impl.KeyguardScreen: void onResume ()> (2)
<android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely (android.view.IOnKeyguardExitResult)> ()
<android.view.IWindowManager$Stub: void exitKeyguardSecurely (android.view.IOnKeyguardExitResult)> (2)
<com.android.server.wm.InputMonitor: long interceptKeyBeforeDispatching (com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: android.view.KeyEvent dispatchUnhandledKey (android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.widget.TransportControlView: void onClick (android.view.View)> (1)
<com.android.internal.widget.WaveView: void setGrabbedState (int)> (2)
<com.android.internal.widget.LockPatternView: void notifyCellAdded ()> (1)
<com.android.internal.widget.LockPatternView: void notifyPatternDetected ()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onGrabbedStateChange (android.view.View,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$OnTriggerListener: void onTrigger (android.view.View,int)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onGrabbedStateChange (android.view.View,int)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger (android.view.View,int)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: boolean onKeyDown (int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone (boolean)> (13)
<com.android.internal.policy.impl.PhoneWindowManager$15: void run ()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$9: void run ()> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDoneDrawing ()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurningOn (android.view.WindowManagerPolicy$ScreenOnListener)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing (android.view.KeyEvent,int,boolean)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void notifyLidSwitchChanged (long,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptMotionBeforeQueueingWhenScreenOff (int)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void checkSelection ()> (2)
<com.android.contacts.list.ContactBrowseListFragment: void viewContact (android.net.Uri)> (1)
<com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener: void onDateSet (com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onLabelRebuilt ()> (5)
<com.android.server.wm.WindowManagerService: void <init> (android.content.Context,com.android.server.PowerManagerService,boolean,boolean,boolean)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View createUnlockScreenFor (com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode)> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View createLockScreen ()> (1)
<com.android.internal.policy.impl.PatternUnlockScreen: void onWindowFocusChanged (boolean)> (3)
<com.android.internal.policy.impl.LockPatternKeyguardView: void show ()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void updateScreen (com.android.internal.policy.impl.LockPatternKeyguardView$Mode,boolean)> (4)
<android.view.IWindowManager$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void exitKeyguardSecurely (android.view.IOnKeyguardExitResult)> (1)
<com.android.server.input.InputManagerService$Callbacks: long interceptKeyBeforeDispatching (com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<android.view.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey (android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.widget.WaveView: boolean onTouchEvent (android.view.MotionEvent)> (2)
<com.android.internal.widget.WaveView: void tryTransitionToStartAttemptState (android.view.MotionEvent)> (1)
<com.android.internal.widget.LockPatternView: void addCellToPattern (com.android.internal.widget.LockPatternView$Cell)> (1)
<com.android.internal.widget.LockPatternView: void handleActionUp (android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void setGrabbedState (int)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent (int)> (1)
<com.android.internal.widget.SlidingTab: void setGrabbedState (int)> (3)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent (int)> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDone (boolean)> (4)
<com.android.internal.policy.impl.KeyguardViewManager$KeyguardViewHost: void dispatchDraw (android.graphics.Canvas)> (3)
<android.view.WindowManagerPolicy: void screenTurningOn (android.view.WindowManagerPolicy$ScreenOnListener)> (1)
<android.view.WindowManagerPolicy: int interceptKeyBeforeQueueing (android.view.KeyEvent,int,boolean)> (1)
<android.view.WindowManagerPolicy: void notifyLidSwitchChanged (long,boolean)> (1)
<android.view.WindowManagerPolicy: int interceptMotionBeforeQueueingWhenScreenOff (int)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onContactUriQueryFinished (android.net.Uri)> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void checkSelection ()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void viewContact (android.net.Uri)> (2)
<com.android.contacts.datepicker.DatePickerDialog: void onClick (android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView$3: void onClick (android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onTypeSelectionChange (int)> (5)
<com.android.contacts.editor.PhoneticNameEditorView: void onLabelRebuilt ()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onLabelRebuilt ()> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onLabelRebuilt ()> (1)
<com.android.server.wm.WindowManagerService: void <init> (android.content.Context,com.android.server.PowerManagerService,boolean,boolean,boolean,com.android.server.wm.WindowManagerService$1)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView: void recreateUnlockScreen (com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView: void recreateLockScreen ()> (1)
<com.android.internal.policy.impl.KeyguardViewBase: void show ()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView: void onScreenTurnedOn ()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView: void access$200 (com.android.internal.policy.impl.LockPatternKeyguardView,com.android.internal.policy.impl.LockPatternKeyguardView$Mode,boolean)> (6)
<com.android.internal.policy.impl.LockPatternKeyguardView: void verifyUnlock ()> (1)
<com.android.server.wm.WindowManagerService: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.KeyguardManager: void exitKeyguardSecurely (android.app.KeyguardManager$OnKeyguardExitResult)> (2)
<com.android.server.input.InputManagerService: long interceptKeyBeforeDispatching (com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.server.wm.InputMonitor: android.view.KeyEvent dispatchUnhandledKey (com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.internal.widget.WaveView: boolean onHoverEvent (android.view.MotionEvent)> (1)
<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell detectAndAddHit (float,float)> (2)
<com.android.internal.widget.LockPatternView: boolean onTouchEvent (android.view.MotionEvent)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void doFinish ()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void switchToState (int,float,float)> (6)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent (android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent (android.view.MotionEvent)> (2)
<com.android.internal.widget.SlidingTab: void cancelGrab ()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView$3: void goToLockScreen ()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$3: void goToUnlockScreen ()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$3: void keyguardDone (boolean)> (2)
<com.android.server.wm.InputMonitor: int interceptKeyBeforeQueueing (android.view.KeyEvent,int,boolean)> (1)
<com.android.server.wm.InputMonitor: void notifyLidSwitchChanged (long,boolean)> (1)
<com.android.server.wm.InputMonitor: int interceptMotionBeforeQueueingWhenScreenOff (int)> (1)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: void onPostExecute (android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void refreshSelectedContactUri ()> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onContactUriQueryFinished (android.net.Uri)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick (int,long)> (1)
<com.android.contacts.editor.EventFieldEditorView: void onTypeSelectionChange (int)> (1)
<com.android.contacts.editor.LabeledEditorView$1: void onItemSelected (android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onTypeSelectionChange (int)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onTypeSelectionChange (int)> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onTypeSelectionChange (int)> (1)
<com.android.server.wm.WindowManagerService$WMThread: void run ()> (2)
<com.android.internal.policy.impl.KeyguardViewBase: void onScreenTurnedOn ()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void run ()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$3: void forgotPattern (boolean)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$3: void reportFailedUnlockAttempt ()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$4: void onUserChanged (int)> (1)
<com.android.internal.policy.impl.KeyguardViewBase: void verifyUnlock ()> (1)
<com.android.systemui.statusbar.BaseStatusBar$NotificationClicker: void onClick (android.view.View)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar$NotificationClicker: void onClick (android.view.View)> (1)
<com.android.server.input.InputManagerService$Callbacks: android.view.KeyEvent dispatchUnhandledKey (com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.internal.widget.LockPatternView: void handleActionDown (android.view.MotionEvent)> (1)
<com.android.internal.widget.LockPatternView: void handleActionMove (android.view.MotionEvent)> (1)
<com.android.internal.widget.LockPatternView: boolean onHoverEvent (android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean trySwitchToFirstTouchState (float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void access$300 (com.android.internal.widget.multiwaveview.GlowPadView,int,float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleCancel (android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleDown (android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleMove (android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleUp (android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: void onVisibilityChanged (android.view.View,int)> (2)
<com.android.internal.policy.impl.KeyguardScreenCallback: void goToLockScreen ()> (5)
<com.android.internal.policy.impl.KeyguardScreenCallback: void goToUnlockScreen ()> (6)
<com.android.internal.policy.impl.KeyguardScreenCallback: void keyguardDone (boolean)> (6)
<com.android.server.input.InputManagerService$Callbacks: int interceptKeyBeforeQueueing (android.view.KeyEvent,int,boolean)> (1)
<com.android.server.input.InputManagerService$Callbacks: void notifyLidSwitchChanged (long,boolean)> (1)
<com.android.server.input.InputManagerService$Callbacks: int interceptMotionBeforeQueueingWhenScreenOff (int)> (1)
<com.android.contacts.list.ContactBrowseListFragment$ContactLookupTask: void onPostExecute (java.lang.Object)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished (android.content.Loader,android.database.Cursor)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri (android.net.Uri,boolean,boolean,boolean,boolean)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void refreshSelectedContactUri ()> (1)
<com.android.contacts.list.ContactEntryListFragment: void onItemClick (int,long)> (1)
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService main (android.content.Context,com.android.server.PowerManagerService,boolean,boolean,boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewManager: void onScreenTurnedOn (com.android.internal.policy.impl.KeyguardViewManager$ShowListener)> (1)
<com.android.internal.policy.impl.KeyguardScreenCallback: void forgotPattern (boolean)> (2)
<com.android.internal.policy.impl.KeyguardScreenCallback: void reportFailedUnlockAttempt ()> (3)
<com.android.internal.policy.impl.KeyguardUpdateMonitor$InfoCallbackImpl: void onUserChanged (int)> (4)
<com.android.server.input.InputManagerService: android.view.KeyEvent dispatchUnhandledKey (com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.internal.widget.multiwaveview.GlowPadView$1: void onAnimationEnd (android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$2: void onAnimationEnd (android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onTouchEvent (android.view.MotionEvent)> (2)
<com.android.internal.policy.impl.AccountUnlockScreen: boolean dispatchKeyEvent (android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.LockScreen$3: void run ()> (1)
<com.android.internal.policy.impl.LockScreen: boolean onKeyDown (int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.AccountUnlockScreen$1: void run ()> (1)
<com.android.internal.policy.impl.FaceUnlock: void handleUnlock ()> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void verifyPasswordAndUnlock ()> (1)
<com.android.server.input.InputManagerService: int interceptKeyBeforeQueueing (android.view.KeyEvent,int,boolean)> ()
<com.android.server.input.InputManagerService: void notifyLidSwitchChanged (long,boolean)> ()
<com.android.server.input.InputManagerService: int interceptMotionBeforeQueueingWhenScreenOff (int)> ()
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished (android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.ContactEntryListFragment: void onLoadFinished (android.content.Loader,android.database.Cursor)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished (android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void reloadDataAndSetSelectedUri (android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void restoreSelectedUri (boolean)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void selectDefaultContact ()> (3)
<com.android.contacts.list.ContactBrowseListFragment: void selectFirstFoundContactAfterDelay ()> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri (android.net.Uri)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri (android.net.Uri,boolean,boolean,boolean,boolean)> (1)
<com.android.contacts.list.ContactEntryListFragment: void onItemClick (android.widget.AdapterView,android.view.View,int,long)> (8)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleNotifyScreenOn (com.android.internal.policy.impl.KeyguardViewManager$ShowListener)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$2: void onClick (android.view.View)> (1)
<com.android.internal.policy.impl.KeyguardStatusViewManager$1: void onUserChanged (int)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor$InfoCallback: void onUserChanged (int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator$1: void onUserChanged (int)> (1)
<com.android.internal.policy.impl.LockScreen$1: void onUserChanged (int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onHoverEvent (android.view.MotionEvent)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onEditorAction (android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.contacts.list.ContactEntryListFragment: void onLoadFinished (android.content.Loader,java.lang.Object)> (5)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished (android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished (android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onLoadFinished (android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished (android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onLoadFinished (android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished (android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void reloadDataAndSetSelectedUri (android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onAttach (android.app.Activity)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter (com.android.contacts.list.ContactListFilter,boolean)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void setSearchMode (boolean)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void restoreSelectedUri (boolean)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectDefaultContact ()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectFirstFoundContactAfterDelay ()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri (android.net.Uri)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void onItemClick (android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick (android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick (android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onItemClick (android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.JoinContactListFragment: void onItemClick (android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onItemClick (android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick (android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1700 (com.android.internal.policy.impl.KeyguardViewMediator,com.android.internal.policy.impl.KeyguardViewManager$ShowListener)> (8)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void handleUserChanged (int)> (1)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished (android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void onLoadFinished (android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished (android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished (android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onLoadFinished (android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.ContactEntryListFragment: void onAttach (android.app.Activity)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onAttach (android.app.Activity)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter (com.android.contacts.list.ContactListFilter)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter (com.android.contacts.list.ContactListFilter,boolean)> (2)
<com.android.contacts.list.ContactEntryListFragment: void setSearchMode (boolean)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSearchMode (boolean)> (2)
<com.android.contacts.activities.PeopleActivity: void configureContactListFragmentForRequest ()> (1)
<com.android.contacts.list.ContactPickerFragment: void onAttach (android.app.Activity)> (2)
<com.android.contacts.list.EmailAddressPickerFragment: void onAttach (android.app.Activity)> (2)
<com.android.contacts.list.JoinContactListFragment: void onAttach (android.app.Activity)> (2)
<com.android.contacts.list.PhoneNumberPickerFragment: void onAttach (android.app.Activity)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void onAttach (android.app.Activity)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter (com.android.contacts.list.ContactListFilter)> (5)
<com.android.contacts.activities.PeopleActivity$ContactBrowserActionListener: void onInvalidSelection ()> (1)
<com.android.contacts.list.ContactEntryListFragment: void setQueryString (java.lang.String,boolean)> (7)
<com.android.contacts.list.ContactPickerFragment: void setSearchMode (boolean)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void setSearchMode (boolean)> (1)
<com.android.contacts.list.JoinContactListFragment: void setSearchMode (boolean)> (2)
<com.android.contacts.list.PhoneNumberPickerFragment: void setSearchMode (boolean)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void setSearchMode (boolean)> (1)
<com.android.contacts.activities.PeopleActivity: void configureContactListFragment ()> (1)
<com.android.contacts.activities.PeopleActivity: void onContactListFilterChanged ()> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onInvalidSelection ()> (1)
<com.android.contacts.activities.ContactSelectionActivity: boolean onQueryTextChange (java.lang.String)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void setQueryString (java.lang.String,boolean)> (2)
<com.android.contacts.list.ContactPickerFragment: void setQueryString (java.lang.String,boolean)> (1)
<com.android.contacts.list.EmailAddressPickerFragment: void setQueryString (java.lang.String,boolean)> (1)
<com.android.contacts.list.JoinContactListFragment: void setQueryString (java.lang.String,boolean)> (2)
<com.android.contacts.list.PhoneNumberPickerFragment: void setQueryString (java.lang.String,boolean)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void setQueryString (java.lang.String,boolean)> (1)
<com.android.contacts.list.ContactListFilterController$ContactListFilterListener: void onContactListFilterChanged ()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void notifyInvalidSelection ()> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setQueryString (java.lang.String,boolean)> (3)
<com.android.contacts.activities.JoinContactActivity: boolean onQueryTextChange (java.lang.String)> (1)
<com.android.contacts.activities.DialtactsActivity$7: boolean onQueryTextChange (java.lang.String)> (1)
<com.android.contacts.list.ContactListFilterControllerImpl: void notifyContactListFilterChanged ()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void notifyInvalidSelection ()> (1)
<com.android.contacts.activities.PeopleActivity: void setQueryTextToFragment (java.lang.String)> (2)
<com.android.contacts.list.ContactListFilterControllerImpl: void setContactListFilter (com.android.contacts.list.ContactListFilter,boolean,boolean)> (2)
<com.android.contacts.list.ContactListFilterControllerImpl: void setContactListFilter (com.android.contacts.list.ContactListFilter,boolean)> (2)
<com.android.contacts.list.ContactListFilterControllerImpl: void selectCustomFilter ()> (1)
<com.android.contacts.list.ContactListFilterController: void setContactListFilter (com.android.contacts.list.ContactListFilter,boolean)> (4)
<com.android.contacts.list.ContactListFilterController: void selectCustomFilter ()> (1)
<com.android.contacts.util.AccountFilterUtil: void handleAccountFilterResult (com.android.contacts.list.ContactListFilterController,int,android.content.Intent)> (5)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onActivityResult (int,int,android.content.Intent)> (2)
<com.android.contacts.list.PhoneFavoriteFragment: void onActivityResult (int,int,android.content.Intent)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onActivityResult (int,int,android.content.Intent)> (2)
<com.android.contacts.list.ContactEntryListFragment: void onActivityResult (int,int,android.content.Intent)> (1)
<android.provider.Browser: void deleteFromHistory (android.content.ContentResolver,java.lang.String)> (1)
<com.android.browser.BrowserHistoryPage: boolean onContextItemSelected (android.view.MenuItem)> (1)
<android.provider.BrowserContract$Bookmarks: android.net.Uri buildFolderUri (long)> (1)
<com.android.browser.AddBookmarkPage: android.net.Uri getUriForFolder (long)> (2)
<com.android.browser.AddBookmarkPage: android.content.Loader onCreateLoader (int,android.os.Bundle)> (1)
<com.android.browser.AddBookmarkPage: void onTop (com.android.browser.BreadCrumbView,int,java.lang.Object)> (1)
<com.android.browser.BreadCrumbView$Controller: void onTop (com.android.browser.BreadCrumbView,int,java.lang.Object)> (2)
<com.android.browser.BreadCrumbView: void notifyController ()> (3)
<com.android.browser.view.BookmarkExpandableView: void onTop (com.android.browser.BreadCrumbView,int,java.lang.Object)> (1)
<com.android.browser.AddBookmarkPage: void descendInto (java.lang.String,long)> (2)
<com.android.browser.BreadCrumbView: void onClick (android.view.View)> (1)
<com.android.browser.BreadCrumbView: void pop (boolean)> (3)
<com.android.browser.AddBookmarkPage: void completeOrCancelFolderNaming (boolean)> (3)
<com.android.browser.AddBookmarkPage: void onItemClick (android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.BreadCrumbView: void clear ()> (1)
<com.android.browser.BreadCrumbView: void popView ()> (1)
<com.android.browser.AddBookmarkPage: boolean onEditorAction (android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.AddBookmarkPage: void onClick (android.view.View)> (1)
<com.android.browser.AddBookmarkPage: void setupTopCrumb ()> (2)
<com.android.browser.AddBookmarkPage: void onRootFolderFound (long)> (2)
<com.android.browser.AddBookmarkPage: void switchToDefaultView (boolean)> (1)
<com.android.browser.AddBookmarkPage: void onItemSelected (android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.AddBookmarkPage: void setAccount (java.lang.String,java.lang.String)> (1)
<com.android.browser.AddBookmarkPage$1: void onLoadFinished (android.content.Loader,com.android.browser.AddBookmarkPage$EditBookmarkInfo)> (1)
<com.android.browser.AddBookmarkPage$1: void onLoadFinished (android.content.Loader,java.lang.Object)> (1)
<com.android.browser.DownloadTouchIcon: void storeIcon (android.graphics.Bitmap)> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Void doInBackground (java.lang.String[])> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Object doInBackground (java.lang.Object[])> (1)
<android.provider.Browser: void updateVisitedHistory (android.content.ContentResolver,java.lang.String,boolean)> ()
<com.android.browser.Controller$SaveSnapshotTask: java.lang.Long doInBackground (java.lang.Void[])> (1)
<com.android.browser.Controller$SaveSnapshotTask: java.lang.Object doInBackground (java.lang.Object[])> (1)
<com.android.browser.BrowserBackupAgent: void addBookmark (com.android.browser.BrowserBackupAgent$Bookmark)> (1)
<com.android.browser.BrowserBackupAgent: void onRestore (android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (1)
<android.provider.Browser: void truncateHistory (android.content.ContentResolver)> (2)
<com.android.browser.DataController$DataControllerHandler: void doUpdateVisitedHistory (java.lang.String)> (1)
<android.provider.BrowserContract$SyncState: android.content.ContentProviderOperation newSetOperation (android.accounts.Account,byte[])> ()
<android.provider.BrowserContract$SyncState: void set (android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<android.provider.Browser: void clearSearches (android.content.ContentResolver)> (1)
<com.android.browser.BrowserSettings: void clearHistory ()> (1)
<com.android.browser.BrowserYesNoPreference: void onDialogClosed (boolean)> (2)
<com.android.internal.preference.YesNoPreference: void onDialogClosed (boolean)> (2)
<com.android.browser.Bookmarks: void removeFromBookmarks (android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String)> (3)
<com.android.browser.BrowserBookmarksPage: boolean handleContextItem (int,int,int)> (1)
<com.android.browser.HistoryItem: void onCheckedChanged (android.widget.CompoundButton,boolean)> (1)
<com.android.browser.BrowserBookmarksPage: boolean onContextItemSelected (android.view.MenuItem)> (2)
<com.android.browser.BrowserBookmarksPage$2: boolean onMenuItemClick (android.view.MenuItem)> (1)
<com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts: void delete (android.content.ContentResolver,java.lang.String,java.lang.String)> (1)
<com.android.browser.Controller$10: java.lang.Void doInBackground (java.lang.Void[])> (1)
<com.android.browser.Controller$10: java.lang.Object doInBackground (java.lang.Object[])> (1)
<com.android.browser.DataController$DataControllerHandler: void handleMessage (com.android.browser.DataController$DCMessage)> (1)
<com.android.browser.DataController$DataControllerHandler: void run ()> (2)
<com.android.browser.DataController: void <init> (android.content.Context)> (1)
<com.android.browser.DataController: com.android.browser.DataController getInstance (android.content.Context)> (6)
<com.android.browser.Controller: void doUpdateVisitedHistory (com.android.browser.Tab,boolean)> (1)
<com.android.browser.Controller: void onReceivedTitle (com.android.browser.Tab,java.lang.String)> (1)
<com.android.browser.Tab: void deleteThumbnail ()> (4)
<com.android.browser.Tab: void <init> (com.android.browser.WebViewController,android.webkit.WebView,android.os.Bundle)> (5)
<com.android.browser.Tab: void persistThumbnail ()> (2)
<com.android.browser.Tab: void restoreState (android.os.Bundle)> (2)
<com.android.browser.WebViewController: void doUpdateVisitedHistory (com.android.browser.Tab,boolean)> (1)
<com.android.browser.WebViewController: void onReceivedTitle (com.android.browser.Tab,java.lang.String)> (1)
<com.android.browser.SnapshotTab: void deleteThumbnail ()> (1)
<com.android.browser.TabControl: void saveState (android.os.Bundle)> (1)
<com.android.browser.Tab: void removeFromTree ()> (3)
<com.android.browser.Tab: void updateShouldCaptureThumbnails ()> (4)
<com.android.browser.SnapshotTab: void <init> (com.android.browser.WebViewController,android.webkit.WebView,android.os.Bundle)> (1)
<com.android.browser.SnapshotTab: void <init> (com.android.browser.WebViewController,long)> (1)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab (android.os.Bundle,boolean)> (2)
<com.android.browser.Tab: void <init> (com.android.browser.WebViewController,android.os.Bundle)> (2)
<com.android.browser.Tab: void <init> (com.android.browser.WebViewController,android.webkit.WebView)> (2)
<com.android.browser.SnapshotTab: void persistThumbnail ()> (1)
<com.android.browser.Tab: void capture ()> (6)
<com.android.browser.SnapshotTab: void restoreState (android.os.Bundle)> (1)
<com.android.browser.Tab$2: void doUpdateVisitedHistory (android.webkit.WebView,java.lang.String,boolean)> (1)
<com.android.browser.Tab$3: void onReceivedTitle (android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.Controller: android.os.Bundle createSaveState ()> (2)
<com.android.browser.SnapshotTab: void removeFromTree ()> (1)
<com.android.browser.TabControl: boolean removeTab (com.android.browser.Tab)> (2)
<com.android.browser.TabControl: void removeParentChildRelationShips ()> (1)
<com.android.browser.SnapshotTab: void updateShouldCaptureThumbnails ()> (1)
<com.android.browser.Tab: void setController (com.android.browser.WebViewController)> (2)
<com.android.browser.XLargeUi: void setUseQuickControls (boolean)> (2)
<com.android.browser.TabControl: com.android.browser.SnapshotTab createSnapshotTab (long)> (1)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab (boolean)> (2)
<com.android.browser.TabControl: void restoreState (android.os.Bundle,long,boolean,boolean)> (1)
<com.android.browser.SnapshotTab: void <init> (com.android.browser.WebViewController,android.os.Bundle)> (1)
<com.android.browser.Preloader$PreloaderSession: void <init> (com.android.browser.Preloader,java.lang.String)> (1)
<com.android.browser.SnapshotTab: void <init> (com.android.browser.WebViewController,android.webkit.WebView)> (1)
<com.android.browser.PhoneUi: void showNavScreen ()> (2)
<com.android.browser.PieControl: void buildTabs ()> (1)
<com.android.browser.SnapshotTab: void capture ()> (1)
<com.android.browser.Tab: void putInBackground ()> (5)
<com.android.browser.Tab: void postCapture ()> (3)
<com.android.browser.Controller: void onSaveInstanceState (android.os.Bundle)> (1)
<com.android.browser.CrashRecoveryHandler$2: void run ()> (1)
<com.android.browser.Controller: void closeCurrentTab (boolean)> (2)
<com.android.browser.Controller: void removeTab (com.android.browser.Tab)> (2)
<com.android.browser.Controller: void onActivityResult (int,int,android.content.Intent)> (1)
<com.android.browser.SnapshotTab: void setController (com.android.browser.WebViewController)> (1)
<com.android.browser.TabControl: void addPreloadedTab (com.android.browser.Tab)> (1)
<com.android.browser.BaseUi: void setUseQuickControls (boolean)> (3)
<com.android.browser.XLargeUi: void <init> (android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.Controller: com.android.browser.SnapshotTab createNewSnapshotTab (long,boolean)> (2)
<com.android.browser.Controller: com.android.browser.Tab createNewTab (boolean,boolean,boolean)> (2)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab ()> ()
<com.android.browser.Controller: void onPreloginFinished (android.os.Bundle,android.content.Intent,long,boolean)> (1)
<com.android.browser.Preloader: com.android.browser.Preloader$PreloaderSession getSession (java.lang.String)> (2)
<com.android.browser.PhoneUi: void toggleNavScreen ()> (2)
<com.android.browser.PieControl: void onClick (android.view.View)> (1)
<com.android.browser.PieControl: void access$000 (com.android.browser.PieControl)> (1)
<com.android.browser.SnapshotTab: void putInBackground ()> (1)
<com.android.browser.TabControl: boolean setCurrentTab (com.android.browser.Tab,boolean)> (2)
<com.android.browser.SnapshotTab: void postCapture ()> (1)
<com.android.browser.Tab: void onNewPicture (android.webkit.WebView,android.graphics.Picture)> (2)
<com.android.browser.ActivityController: void onSaveInstanceState (android.os.Bundle)> (2)
<com.android.browser.Controller: void closeCurrentTab ()> (4)
<com.android.browser.Controller: void goBackOnePageOrQuit ()> (2)
<com.android.browser.Controller: void closeTab (com.android.browser.Tab)> (6)
<com.android.browser.Controller: void onDestroy ()> (1)
<com.android.browser.Controller: com.android.browser.Tab showPreloadedTab (com.android.browser.IntentHandler$UrlData)> (1)
<com.android.browser.PhoneUi: void setUseQuickControls (boolean)> (2)
<com.android.browser.UI: void setUseQuickControls (boolean)> (1)
<com.android.browser.BaseUi: void <init> (android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.BrowserActivity: com.android.browser.Controller createController ()> (1)
<com.android.browser.UiController: com.android.browser.SnapshotTab createNewSnapshotTab (long,boolean)> ()
<com.android.browser.Controller: com.android.browser.Tab openTab (com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.Controller: com.android.browser.Tab openTab (java.lang.String,boolean,boolean,boolean,com.android.browser.Tab)> (2)
<com.android.browser.Controller: void access$100 (com.android.browser.Controller,android.os.Bundle,android.content.Intent,long,boolean)> (1)
<com.android.browser.Preloader: void cancelSearchBoxPreload (java.lang.String)> (1)
<com.android.browser.Preloader: void handlePreloadRequest (java.lang.String,java.lang.String,java.util.Map,java.lang.String)> (1)
<com.android.browser.NavigationBarPhone: void onClick (android.view.View)> (1)
<com.android.browser.SnapshotBar: void onClick (android.view.View)> (1)
<com.android.browser.PieControl$1: void onLayout (int,int,boolean)> (1)
<com.android.browser.TabControl: boolean setCurrentTab (com.android.browser.Tab)> (3)
<com.android.browser.TabControl: void recreateWebView (com.android.browser.Tab)> (1)
<com.android.browser.SnapshotTab: void onNewPicture (android.webkit.WebView,android.graphics.Picture)> (1)
<com.android.browser.BrowserActivity: void onNewIntent (android.content.Intent)> (1)
<com.android.browser.BrowserActivity: void onSaveInstanceState (android.os.Bundle)> (1)
<com.android.browser.Controller: boolean onOptionsItemSelected (android.view.MenuItem)> (3)
<com.android.browser.Controller: void closeEmptyTab ()> (2)
<com.android.browser.UiController: void closeCurrentTab ()> (3)
<com.android.browser.Controller: void onBackKey ()> (1)
<com.android.browser.Controller: void onDownloadStart (com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.UiController: void closeTab (com.android.browser.Tab)> (2)
<com.android.browser.WebViewController: void closeTab (com.android.browser.Tab)> (2)
<com.android.browser.ActivityController: void onDestroy ()> (1)
<com.android.browser.PhoneUi: void <init> (android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.BrowserSettings: void onSharedPreferenceChanged (android.content.SharedPreferences,java.lang.String)> (1)
<com.android.browser.IntentHandler: void onNewIntent (android.content.Intent)> (2)
<com.android.browser.Controller: com.android.browser.Tab openTab (java.lang.String,boolean,boolean,boolean)> (5)
<com.android.browser.Controller: com.android.browser.Tab openTab (java.lang.String,com.android.browser.Tab,boolean,boolean)> (5)
<com.android.browser.Controller$2: void run ()> (1)
<com.android.browser.PreloadRequestReceiver: void handlePreload (android.content.Context,android.content.Intent)> (1)
<com.android.browser.NavigationBarBase: void onClick (android.view.View)> (3)
<com.android.browser.view.PieMenu$PieView$OnLayoutListener: void onLayout (int,int,boolean)> (1)
<com.android.browser.Controller: void setActiveTab (com.android.browser.Tab)> (8)
<com.android.browser.Controller: void reuseTab (com.android.browser.Tab,com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.ActivityController: boolean onOptionsItemSelected (android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean onContextItemSelected (android.view.MenuItem)> (1)
<com.android.browser.UiController: boolean onOptionsItemSelected (android.view.MenuItem)> (2)
<com.android.browser.UrlHandler: boolean shouldOverrideUrlLoading (com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler: boolean startActivityForUrl (com.android.browser.Tab,java.lang.String)> (2)
<com.android.browser.NavScreen: void onCloseTab (com.android.browser.Tab)> (1)
<com.android.browser.TabBar$TabView: void closeTab ()> (1)
<com.android.browser.Controller: boolean onKeyUp (int,android.view.KeyEvent)> (1)
<com.android.browser.WebViewController: void onDownloadStart (com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (2)
<com.android.browser.SnapshotTab$LoadData: void onPostExecute (android.database.Cursor)> (1)
<com.android.browser.Tab$3: void onCloseWindow (android.webkit.WebView)> (1)
<com.android.browser.BrowserActivity: void onDestroy ()> (1)
<com.android.browser.Controller: void handleNewIntent (android.content.Intent)> (2)
<com.android.browser.Controller: com.android.browser.Tab openIncognitoTab ()> (3)
<com.android.browser.Controller: com.android.browser.Tab openTabToHomePage ()> (4)
<com.android.browser.UiController: com.android.browser.Tab openTab (java.lang.String,boolean,boolean,boolean)> (1)
<com.android.browser.UrlHandler: boolean handleMenuClick (com.android.browser.Tab,java.lang.String)> (2)
<com.android.browser.WebViewController: com.android.browser.Tab openTab (java.lang.String,boolean,boolean,boolean)> ()
<com.android.browser.Controller$7: boolean onMenuItemClick (android.view.MenuItem)> (1)
<com.android.browser.Controller$9: boolean onMenuItemClick (android.view.MenuItem)> (1)
<com.android.browser.WebViewController: com.android.browser.Tab openTab (java.lang.String,com.android.browser.Tab,boolean,boolean)> (1)
<com.android.browser.PreloadRequestReceiver: void onReceive (android.content.Context,android.content.Intent)> (1)
<com.android.browser.NavigationBarTablet: void onClick (android.view.View)> (1)
<com.android.browser.view.BasePieView: void layout (int,int,boolean,float,int)> (3)
<com.android.browser.Controller: boolean switchToTab (com.android.browser.Tab)> (8)
<com.android.browser.UiController: void setActiveTab (com.android.browser.Tab)> (2)
<com.android.browser.BrowserActivity: boolean onOptionsItemSelected (android.view.MenuItem)> (1)
<com.android.browser.ActivityController: boolean onContextItemSelected (android.view.MenuItem)> (1)
<com.android.browser.NavigationBarPhone: boolean onMenuItemClick (android.view.MenuItem)> (1)
<com.android.browser.NavScreen: boolean onMenuItemClick (android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean shouldOverrideUrlLoading (com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler$RLZTask: void onPostExecute (java.lang.String)> (1)
<com.android.browser.NavScreen: void access$000 (com.android.browser.NavScreen,com.android.browser.Tab)> (1)
<com.android.browser.TabBar$TabView: void onClick (android.view.View)> (1)
<com.android.browser.ActivityController: boolean onKeyUp (int,android.view.KeyEvent)> (1)
<com.android.browser.Tab$4: void onDownloadStart (java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Tab$7: void onDownloadStart (java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.SnapshotTab$LoadData: void onPostExecute (java.lang.Object)> (1)
<com.android.browser.ActivityController: void handleNewIntent (android.content.Intent)> (1)
<com.android.browser.UiController: void handleNewIntent (android.content.Intent)> (1)
<com.android.browser.Controller: boolean onKeyDown (int,android.view.KeyEvent)> (1)
<com.android.browser.UiController: com.android.browser.Tab openIncognitoTab ()> (1)
<com.android.browser.UiController: com.android.browser.Tab openTabToHomePage ()> (2)
<com.android.browser.NavScreen: void openNewTab ()> (1)
<com.android.browser.Tab$3: void createWindow (boolean,android.os.Message)> (2)
<com.android.browser.view.PieListView: void layout (int,int,boolean,float,int)> (1)
<com.android.browser.view.PieMenu$PieView: void layout (int,int,boolean,float,int)> (1)
<com.android.browser.view.PieStackView: void layout (int,int,boolean,float,int)> (1)
<com.android.browser.UiController: boolean switchToTab (com.android.browser.Tab)> (2)
<com.android.browser.WebViewController: boolean switchToTab (com.android.browser.Tab)> (2)
<com.android.browser.NavScreen: void switchToTab (com.android.browser.Tab)> (1)
<com.android.browser.PhoneUi: void hideNavScreen (int,boolean)> (5)
<com.android.browser.BrowserActivity: boolean onContextItemSelected (android.view.MenuItem)> (1)
<com.android.browser.WebViewController: boolean shouldOverrideUrlLoading (com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler$RLZTask: void onPostExecute (java.lang.Object)> (1)
<com.android.browser.NavScreen$1: void onRemovePosition (int)> (1)
<com.android.browser.BrowserActivity: boolean onKeyUp (int,android.view.KeyEvent)> (1)
<com.android.browser.NavigationBarBase: void onAction (java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.TabBar: void onClick (android.view.View)> (1)
<com.android.browser.NavScreen: void onClick (android.view.View)> (1)
<com.android.browser.Tab$3: boolean onCreateWindow (android.webkit.WebView,boolean,boolean,android.os.Message)> (1)
<com.android.browser.Tab$3: void access$1600 (com.android.browser.Tab$3,boolean,android.os.Message)> (1)
<com.android.browser.view.PieMenu: void layoutPieView (com.android.browser.view.PieMenu$PieView,int,int,float)> (1)
<com.android.browser.PieControl$TabAdapter$1: void onClick (android.view.View)> (1)
<com.android.browser.Tab$3: void onRequestFocus (android.webkit.WebView)> (1)
<com.android.browser.NavScreen: void access$100 (com.android.browser.NavScreen,com.android.browser.Tab)> (2)
<com.android.browser.NavScreen$2: void onLayout (int,int,int,int)> (1)
<com.android.browser.NavScreen: void close (int,boolean)> (2)
<com.android.browser.PhoneUi: boolean onOptionsItemSelected (android.view.MenuItem)> (1)
<com.android.browser.PhoneUi: void showWeb (boolean)> (1)
<com.android.browser.Tab$2: boolean shouldOverrideUrlLoading (android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.NavTabScroller$OnRemoveListener: void onRemovePosition (int)> (1)
<com.android.browser.NavigationBarPhone: void onAction (java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.NavigationBarTablet: void onAction (java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.UrlInputView$UrlInputListener: void onAction (java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.Tab$3$1: void onClick (android.content.DialogInterface,int)> (1)
<com.android.browser.view.PieMenu: boolean onTouchEvent (android.view.MotionEvent)> (3)
<com.android.browser.NavScreen$TabAdapter$1: void onClick (android.view.View)> (1)
<com.android.browser.NavTabScroller$OnLayoutListener: void onLayout (int,int,int,int)> (1)
<com.android.browser.NavScreen: void close (int)> (2)
<com.android.browser.BaseUi: boolean onOptionsItemSelected (android.view.MenuItem)> (2)
<com.android.browser.BaseUi: void showWeb (boolean)> (3)
<com.android.browser.NavTabScroller$2: void onAnimationEnd (android.animation.Animator)> (1)
<com.android.browser.UrlInputView: void finishInput (java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.NavTabScroller: void onLayout (boolean,int,int,int,int)> (4)
<com.android.browser.PhoneUi: boolean onBackKey ()> (1)
<com.android.browser.UI: boolean onOptionsItemSelected (android.view.MenuItem)> (1)
<com.android.browser.XLargeUi: boolean onOptionsItemSelected (android.view.MenuItem)> (1)
<com.android.browser.UI: void showWeb (boolean)> (2)
<com.android.browser.XLargeUi: void showWeb (boolean)> (1)
<com.android.browser.UrlInputView: boolean onEditorAction (android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.UrlInputView: boolean onKeyDown (int,android.view.KeyEvent)> (4)
<com.android.browser.UrlInputView: void onSelect (java.lang.String,int,java.lang.String)> (2)
<com.android.browser.view.ScrollerView: void onLayout (boolean,int,int,int,int)> (4)
<com.android.browser.BaseUi: boolean onBackKey ()> (3)
<com.android.browser.SuggestionsAdapter$CompletionListener: void onSelect (java.lang.String,int,java.lang.String)> (1)
<com.android.browser.UrlInputView: void onItemClick (android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.UI: boolean onBackKey ()> (1)
<com.android.browser.XLargeUi: boolean onBackKey ()> (1)
<com.android.browser.SuggestionsAdapter: void onClick (android.view.View)> (1)
<com.android.browser.DataController$DataControllerHandler: void doUpdateHistoryTitle (java.lang.String,java.lang.String)> (1)
<com.android.browser.Controller$PruneThumbnails: void run ()> (1)
<com.android.browser.Bookmarks$1: void updateImages (android.content.ContentResolver,java.lang.String,android.content.ContentValues)> (1)
<com.android.browser.Bookmarks$1: java.lang.Void doInBackground (java.lang.Void[])> (1)
<com.android.browser.Bookmarks$1: java.lang.Object doInBackground (java.lang.Object[])> (1)
<android.provider.Browser: void addSearchUrl (android.content.ContentResolver,java.lang.String)> (1)
<com.android.browser.IntentHandler$1: java.lang.Void doInBackground (java.lang.Void[])> (1)
<com.android.browser.IntentHandler$1: java.lang.Object doInBackground (java.lang.Object[])> (1)
<com.android.browser.BookmarkUtils: android.net.Uri getBookmarksUri (android.content.Context)> (5)
<com.android.browser.AddBookmarkPage$UpdateBookmarkTask: java.lang.Void doInBackground (android.content.ContentValues[])> (1)
<com.android.browser.BrowserBookmarksPage$LookupBookmarkCount: java.lang.Integer doInBackground (java.lang.Long[])> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: android.database.Cursor doInBackground (java.lang.Void[])> (1)
<com.android.browser.DataController$DataControllerHandler: void doQueryBookmarkStatus (java.lang.String,java.lang.Object)> (1)
<com.android.browser.AddBookmarkPage$UpdateBookmarkTask: java.lang.Object doInBackground (java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage$LookupBookmarkCount: java.lang.Object doInBackground (java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: java.lang.Object doInBackground (java.lang.Object[])> (1)
<android.provider.Browser: void deleteHistoryWhere (android.content.ContentResolver,java.lang.String)> (2)
<android.provider.Browser: void clearHistory (android.content.ContentResolver)> (3)
<android.provider.Browser: void deleteHistoryTimeFrame (android.content.ContentResolver,long,long)> ()
<com.android.browser.BrowserHistoryPage$ClearHistoryTask: void run ()> (2)
<com.android.browser.BrowserHistoryPage$3: void onClick (android.content.DialogInterface,int)> (1)
<com.android.browser.provider.BrowserProvider: android.net.Uri insert (android.net.Uri,android.content.ContentValues)> (1)
<com.android.browser.AddBookmarkPage: long addFolderToCurrent (java.lang.String)> (1)
<com.android.browser.Bookmarks: void addBookmark (android.content.Context,boolean,java.lang.String,java.lang.String,android.graphics.Bitmap,long)> (1)
<com.android.browser.AddBookmarkPage$SaveBookmarkRunnable: void run ()> (1)
<android.provider.BrowserContract$Settings: void setSyncEnabled (android.content.Context,boolean)> ()
<com.android.browser.BookmarkUtils$1$1: void run ()> (1)
<com.android.browser.DataController$DataControllerHandler: void doSaveThumbnail (com.android.browser.Tab)> (1)
