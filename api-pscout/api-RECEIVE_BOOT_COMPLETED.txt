Permission:android.permission.RECEIVE_BOOT_COMPLETED
208 Callers:
<com.android.server.accessibility.AccessibilityManagerService: void registerPackageChangeAndBootCompletedBroadcastReceiver ()> (1)
<com.android.server.accessibility.AccessibilityManagerService: void <init> (android.content.Context)> (1)
<com.android.server.ServerThread: void run ()> (1)
<com.android.server.WiredAccessoryObserver: void <init> (android.content.Context)> (1)
<com.android.server.AppWidgetService: void systemReady (boolean)> (1)
<com.android.server.ServerThread$1: void run ()> (1)
<android.server.search.SearchManagerService: void <init> (android.content.Context)> (1)
<com.android.server.am.ActivityManagerService: void finishBooting ()> (2)
<com.android.server.am.ActivityManagerService: void ensureBootCompleted ()> (5)
<com.android.server.am.ActivityStack: com.android.server.am.ActivityRecord activityIdleInternal (android.os.IBinder,boolean,android.content.res.Configuration)> (5)
<com.android.server.am.ActivityManagerService: void appNotResponding (com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,java.lang.String)> (3)
<com.android.server.am.ActivityManagerService: void systemReady (java.lang.Runnable)> (3)
<com.android.server.am.ActivityManagerService: void crashApplication (com.android.server.am.ProcessRecord,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.ActivityStack: void completeResumeLocked (com.android.server.am.ActivityRecord)> (2)
<com.android.server.am.ActivityStack: void scheduleIdleLocked ()> (4)
<com.android.server.am.ActivityRecord: void windowsVisible ()> (1)
<com.android.server.am.ActivityManagerService: void serviceTimeout (com.android.server.am.ProcessRecord)> (3)
<com.android.server.am.ActivityRecord: boolean keyDispatchingTimedOut ()> (1)
<com.android.server.am.BroadcastQueue$AppNotResponding: void run ()> (1)
<com.android.server.am.ActivityManagerService$9$1: void run ()> (1)
<com.android.server.am.ActivityManagerService: void startRunning (java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: boolean handleApplicationWtf (android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.ActivityManagerService: void handleApplicationCrash (android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.ActivityManagerService: boolean forceStopPackageLocked (java.lang.String,int,boolean,boolean,boolean,boolean,int)> (7)
<com.android.server.am.ActivityStack: void checkReadyForSleepLocked ()> (7)
<com.android.server.am.ActivityStack: void completePauseLocked ()> (1)
<com.android.server.am.ActivityRecord$Token: void windowsVisible ()> (2)
<com.android.server.am.ActivityManagerService: void bumpServiceExecutingLocked (com.android.server.am.ServiceRecord,java.lang.String)> (5)
<com.android.server.am.ActivityRecord$Token: boolean keyDispatchingTimedOut ()> (2)
<android.app.ActivityManagerNative: void startRunning (java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: android.content.Context main (int)> (1)
<android.app.ActivityManagerNative: boolean handleApplicationWtf (android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (2)
<android.app.ActivityManagerNative: void handleApplicationCrash (android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.ActivityManagerService: boolean access$300 (com.android.server.am.ActivityManagerService,java.lang.String,int,boolean,boolean,boolean,boolean,int)> (3)
<com.android.server.am.ActivityManagerService: int broadcastIntentLocked (com.android.server.am.ProcessRecord,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean,int,int,int)> (8)
<com.android.server.am.ActivityManagerService: void finishInstrumentationLocked (com.android.server.am.ProcessRecord,int,android.os.Bundle)> (4)
<com.android.server.am.ActivityManagerService: void forceStopPackageLocked (java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: void onUserRemoved (android.content.Intent)> (1)
<com.android.server.am.ActivityStack: void activitySleptLocked (com.android.server.am.ActivityRecord)> (1)
<com.android.server.am.ActivityStack: void stopIfSleepingLocked ()> (2)
<com.android.server.am.ActivityStack: void activityPaused (android.os.IBinder,boolean)> (3)
<android.view.IApplicationToken$Stub$Proxy: void windowsVisible ()> ()
<android.view.IApplicationToken$Stub: void windowsVisible ()> (2)
<com.android.server.am.ActivityManagerService: boolean requestServiceBindingLocked (com.android.server.am.ServiceRecord,com.android.server.am.IntentBindRecord,boolean)> (3)
<com.android.server.am.ActivityManagerService: void bringDownServiceLocked (com.android.server.am.ServiceRecord,boolean)> (7)
<com.android.server.am.ActivityManagerService: void realStartServiceLocked (com.android.server.am.ServiceRecord,com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: void removeConnectionLocked (com.android.server.am.ConnectionRecord,com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord)> (3)
<com.android.server.am.ActivityManagerService: void sendServiceArgsLocked (com.android.server.am.ServiceRecord,boolean)> (3)
<android.view.IApplicationToken$Stub$Proxy: boolean keyDispatchingTimedOut ()> ()
<android.view.IApplicationToken$Stub: boolean keyDispatchingTimedOut ()> (2)
<android.app.ActivityManagerNative: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void startRunning (java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<android.app.IActivityManager: boolean handleApplicationWtf (android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (1)
<android.app.IActivityManager: void handleApplicationCrash (android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.ActivityManagerService$6: void onReceive (android.content.Context,android.content.Intent)> (1)
<com.android.server.am.ActivityManagerService: void killApplicationWithUid (java.lang.String,int)> (1)
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked (android.content.res.Configuration,com.android.server.am.ActivityRecord,boolean,boolean)> (7)
<com.android.server.am.ActivityManagerService: int access$100 (com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean,int,int,int)> (2)
<com.android.server.am.ActivityManagerService: void closeSystemDialogsLocked (int,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void handleAppDiedLocked (com.android.server.am.ProcessRecord,boolean,boolean)> (4)
<com.android.server.am.ActivityManagerService: void access$700 (com.android.server.am.ActivityManagerService,android.content.Intent)> (1)
<com.android.server.am.ActivityManagerService: boolean shutdown (int)> (1)
<com.android.server.am.ActivityManagerService: void goingToSleep ()> (1)
<com.android.server.am.ActivityStack: void startPausingLocked (boolean,boolean)> (3)
<android.view.IApplicationToken$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IApplicationToken: void windowsVisible ()> (1)
<com.android.server.am.ActivityManagerService: void requestServiceBindingsLocked (com.android.server.am.ServiceRecord)> (1)
<com.android.server.am.ActivityManagerService: boolean bringUpServiceLocked (com.android.server.am.ServiceRecord,int,boolean)> (3)
<com.android.server.am.ActivityManagerService: void killServicesLocked (com.android.server.am.ProcessRecord,boolean)> (1)
<com.android.server.am.ActivityManagerService: void processStartTimedOutLocked (com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.ActivityManagerService: void stopServiceLocked (com.android.server.am.ServiceRecord)> (2)
<com.android.server.am.ActivityManagerService: boolean attachApplicationLocked (android.app.IApplicationThread,int)> (1)
<com.android.server.am.ActivityManagerService: void cleanUpRemovedTaskLocked (com.android.server.am.TaskRecord,int)> (1)
<android.view.IApplicationToken: boolean keyDispatchingTimedOut ()> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.os.RuntimeInit: void wtf (java.lang.String,java.lang.Throwable)> (1)
<com.android.internal.os.RuntimeInit$UncaughtHandler: void uncaughtException (java.lang.Thread,java.lang.Throwable)> (1)
<android.app.ActivityManagerNative: void killApplicationWithUid (java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: void retrieveSettings ()> (1)
<com.android.server.am.ActivityManagerService: boolean removeProcessLocked (com.android.server.am.ProcessRecord,boolean,boolean,java.lang.String)> (4)
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord startProcessLocked (java.lang.String,android.content.pm.ApplicationInfo,boolean,int,java.lang.String,android.content.ComponentName,boolean,boolean)> (5)
<com.android.server.am.ActivityManagerService: void appDiedLocked (com.android.server.am.ProcessRecord,int,android.app.IApplicationThread)> (4)
<com.android.server.am.ActivityManagerService$7: void onReceive (android.content.Context,android.content.Intent)> (1)
<android.app.ActivityManagerNative: boolean shutdown (int)> (2)
<android.app.ActivityManagerNative: void goingToSleep ()> (2)
<com.android.server.am.ActivityRecord$Token: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService: android.content.ComponentName startServiceLocked (android.app.IApplicationThread,android.content.Intent,java.lang.String,int,int)> (2)
<com.android.server.am.ActivityManagerService: void performServiceRestartLocked (com.android.server.am.ServiceRecord)> (1)
<com.android.server.am.ActivityManagerService: void cleanUpApplicationRecordLocked (com.android.server.am.ProcessRecord,boolean,boolean,int)> (2)
<com.android.server.am.ActivityManagerService: void access$200 (com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord)> (2)
<com.android.server.wm.InputMonitor: long notifyANR (com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle)> (1)
<android.util.Log$1: void onTerribleFailure (java.lang.String,android.util.Log$TerribleFailure)> (1)
<android.app.IActivityManager: void killApplicationWithUid (java.lang.String,int)> (1)
<com.android.server.am.ActivityManagerService: boolean handleAppCrashLocked (com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: boolean killPackageProcessesLocked (java.lang.String,int,int,boolean,boolean,boolean,boolean,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: boolean bindBackupAgent (android.content.pm.ApplicationInfo,int)> (1)
<com.android.server.am.BroadcastQueue: void processNextBroadcast (boolean)> (4)
<com.android.server.am.ActivityManagerService$AppDeathRecipient: void binderDied ()> (1)
<android.app.IActivityManager: boolean shutdown (int)> (1)
<android.app.IActivityManager: void goingToSleep ()> (1)
<com.android.server.am.ActivityManagerService$ServiceRestarter: void run ()> (1)
<com.android.server.am.ActivityManagerService: void trimApplications ()> (5)
<com.android.server.am.ActivityManagerService: void startProcessLocked (com.android.server.am.ProcessRecord,java.lang.String,java.lang.String)> (5)
<com.android.server.input.InputManagerService$Callbacks: long notifyANR (com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle)> (1)
<com.android.server.pm.PackageManagerService: void killApplication (java.lang.String,int)> (3)
<com.android.server.am.ActivityManagerService: boolean makeAppCrashingLocked (com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void killAppAtUsersRequest (com.android.server.am.ProcessRecord,android.app.Dialog)> (4)
<android.app.ActivityManagerNative: boolean bindBackupAgent (android.content.pm.ApplicationInfo,int)> (2)
<com.android.server.am.BroadcastQueue: void scheduleBroadcastsLocked ()> (7)
<com.android.server.pm.ShutdownThread: void run ()> (2)
<com.android.server.PowerManagerService$4: void run ()> (1)
<com.android.server.am.ActivityManagerService: void setProcessLimit (int)> (1)
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord addAppLocked (android.content.pm.ApplicationInfo,boolean)> (4)
<com.android.server.input.InputManagerService: long notifyANR (com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle)> ()
<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI (android.content.pm.PackageParser$Package,int,int,long)> (4)
<com.android.server.pm.PackageManagerService: boolean deletePackageLI (java.lang.String,boolean,int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)> (5)
<com.android.server.pm.PackageManagerService: void replaceSystemPackageLI (android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package,int,int,java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<android.app.IActivityManager: boolean bindBackupAgent (android.content.pm.ApplicationInfo,int)> (1)
<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiver (android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String)> (1)
<com.android.server.am.BroadcastQueue: boolean sendPendingBroadcastsLocked (com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.BroadcastQueue: void broadcastTimeoutLocked (boolean)> (3)
<com.android.server.am.BroadcastQueue: void skipCurrentReceiverLocked (com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.BroadcastQueue: void skipPendingBroadcastLocked (int)> (1)
<com.android.server.pm.ShutdownThread: void beginShutdownSequence (android.content.Context)> (2)
<android.app.ActivityManagerNative: void setProcessLimit (int)> (2)
<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI (java.io.File,int,int,long)> (5)
<com.android.server.pm.PackageManagerService: void installNewPackageLI (android.content.pm.PackageParser$Package,int,int,java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: void replaceNonSystemPackageLI (android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package,int,int,java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: int deletePackageX (java.lang.String,boolean,boolean,int)> (1)
<com.android.server.pm.PackageManagerService: void unloadMediaPackages (java.util.HashMap,int[],boolean)> (1)
<com.android.server.pm.PackageManagerService: void replacePackageLI (android.content.pm.PackageParser$Package,int,int,java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.BackupManagerService: android.app.IBackupAgent bindToAgentSynchronous (android.content.pm.ApplicationInfo,int)> (4)
<android.app.ActivityManagerNative: android.content.Intent registerReceiver (android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: boolean sendPendingBroadcastsLocked (com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.BroadcastQueue: void setBroadcastTimeoutLocked (long)> (2)
<com.android.server.am.ActivityManagerService: void skipCurrentReceiverLocked (com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: void skipPendingBroadcastLocked (int)> (1)
<com.android.server.pm.ShutdownThread: void access$000 (android.content.Context)> (1)
<com.android.server.pm.ShutdownThread: void shutdownInner (android.content.Context,boolean)> (3)
<android.app.IActivityManager: void setProcessLimit (int)> (1)
<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package access$1400 (com.android.server.pm.PackageManagerService,java.io.File,int,int,long)> (1)
<com.android.server.pm.PackageManagerService: boolean deleteSystemPackageLI (android.content.pm.PackageParser$Package,int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)> (1)
<com.android.server.pm.PackageManagerService: void loadMediaPackages (java.util.HashMap,int[],java.util.HashSet)> (1)
<com.android.server.pm.PackageManagerService: void scanDirLI (java.io.File,int,int,long)> (1)
<com.android.server.pm.PackageManagerService: void installPackageLI (com.android.server.pm.PackageManagerService$InstallArgs,boolean,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: int access$3300 (com.android.server.pm.PackageManagerService,java.lang.String,boolean,boolean,int)> (1)
<com.android.server.pm.PackageManagerService: void updateExternalMediaStatusInner (boolean,boolean)> (2)
<com.android.server.BackupManagerService$PerformBackupTask: void invokeNextAgent ()> (1)
<com.android.server.BackupManagerService$PerformFullBackupTask: void backupOnePackage (android.content.pm.PackageInfo,java.io.OutputStream)> (1)
<com.android.server.BackupManagerService$PerformFullRestoreTask: boolean restoreOneFile (java.io.InputStream,byte[])> (1)
<com.android.server.BackupManagerService$PerformRestoreTask: void restoreNextAgent ()> (1)
<android.app.IActivityManager: android.content.Intent registerReceiver (android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: void startAppProblemLocked (com.android.server.am.ProcessRecord)> (2)
<com.android.server.pm.ShutdownThread$1: void onClick (android.content.DialogInterface,int)> (1)
<com.android.server.pm.ShutdownThread: void reboot (android.content.Context,java.lang.String,boolean)> (2)
<com.android.server.pm.ShutdownThread: void rebootSafeMode (android.content.Context,boolean)> (1)
<com.android.server.pm.ShutdownThread: void shutdown (android.content.Context,boolean)> (2)
<com.android.settings.DevelopmentSettings: void writeAppProcessLimitOptions (java.lang.Object)> (2)
<com.android.server.pm.PackageManagerService$AppDirObserver: void onEvent (int,java.lang.String)> (1)
<com.android.server.pm.PackageManagerService: void <init> (android.content.Context,boolean,boolean)> (1)
<com.android.server.pm.PackageManagerService: void access$1600 (com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallArgs,boolean,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService$7: void run ()> (1)
<com.android.server.pm.PackageManagerService: void access$3800 (com.android.server.pm.PackageManagerService,boolean,boolean)> (1)
<com.android.server.pm.PackageManagerService: void scanAvailableAsecs ()> (1)
<com.android.server.BackupManagerService$PerformBackupTask: void execute ()> (1)
<com.android.server.BackupManagerService$PerformFullBackupTask: void run ()> (1)
<com.android.server.BackupManagerService$PerformFullRestoreTask: void run ()> (1)
<com.android.server.BackupManagerService$PerformRestoreTask: void execute ()> (1)
<com.android.commands.monkey.MonkeyNetworkMonitor: void register (android.app.IActivityManager)> (1)
<com.android.server.am.ActivityManagerService: void makeAppNotRespondingLocked (com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.server.PowerManagerService$10: void run ()> (1)
<com.android.server.ShutdownActivity$1: void run ()> (1)
<com.android.server.wm.WindowManagerService: void rebootSafeMode ()> (1)
<com.android.server.wm.WindowManagerService: void shutdown ()> (1)
<com.android.settings.DevelopmentSettings: boolean onPreferenceChange (android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.DevelopmentSettings: void resetDangerousOptions ()> (1)
<com.android.server.pm.PackageManagerService: android.content.pm.IPackageManager main (android.content.Context,boolean,boolean)> (1)
<com.android.server.pm.PackageManagerService$5: void run ()> (1)
<com.android.server.pm.PackageManagerService$10: void run ()> (1)
<com.android.server.MountService$2: void run ()> (2)
<com.android.server.BackupManagerService$BackupRestoreTask: void execute ()> (1)
<com.android.commands.monkey.Monkey: boolean getSystemInterfaces ()> (1)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void rebootSafeMode ()> (1)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void shutdown ()> (2)
<com.android.settings.DevelopmentSettings: void onCheckedChanged (android.widget.CompoundButton,boolean)> (1)
<com.android.server.MountService: void onDaemonConnected ()> (1)
<com.android.commands.monkey.Monkey: int run (java.lang.String[])> (1)
<com.android.internal.policy.impl.GlobalActions$2: boolean onLongPress ()> (1)
<com.android.internal.policy.impl.GlobalActions$2: void onPress ()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run ()> (1)
<com.android.server.INativeDaemonConnectorCallbacks: void onDaemonConnected ()> (1)
<com.android.commands.monkey.Monkey: void main (java.lang.String[])> ()
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: boolean onLongPress ()> (2)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress ()> (1)
<com.android.server.NativeDaemonConnector: void listenToSocket ()> (1)
<com.android.internal.policy.impl.GlobalActions$3: boolean onLongPress ()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: boolean onLongPress ()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress ()> (1)
<com.android.server.NativeDaemonConnector: void run ()> (1)
<com.android.internal.policy.impl.GlobalActions$4: boolean onItemLongClick (android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick (android.content.DialogInterface,int)> (1)
<android.content.SyncManager: void <init> (android.content.Context,boolean)> (1)
<android.content.ContentService: android.content.SyncManager getSyncManager ()> (20)
<android.content.ContentService: void <init> (android.content.Context,boolean)> (1)
<android.content.ContentService: android.content.IContentService main (android.content.Context,boolean)> (1)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void <init> (com.android.server.usb.UsbDeviceManager,android.os.Looper)> (1)
<com.android.server.usb.UsbDeviceManager: void <init> (android.content.Context,com.android.server.usb.UsbSettingsManager)> (1)
<com.android.server.usb.UsbService: void <init> (android.content.Context)> (1)
