Permission:android.permission.WRITE_EXTERNAL_STORAGE
86 Callers:
<com.android.providers.downloads.DownloadProvider: android.net.Uri insert (android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor openFileAndEnforcePathPermissionsHelper (android.net.Uri,java.lang.String)> (1)
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor openFile (android.net.Uri,java.lang.String)> (1)
<com.android.inputmethod.latin.Utils$UsabilityStudyLogUtils$2: void run ()> (1)
<com.android.providers.media.MediaProvider: android.net.Uri getAlbumArtOutputUri (com.android.providers.media.MediaProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,long,android.net.Uri)> (1)
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor makeThumbInternal (com.android.providers.media.MediaProvider$ThumbData)> (2)
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor access$1200 (com.android.providers.media.MediaProvider,com.android.providers.media.MediaProvider$ThumbData)> (1)
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor getThumb (com.android.providers.media.MediaProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,java.lang.String,long,android.net.Uri)> (1)
<com.android.providers.downloads.StorageManager: void trimDatabase ()> (1)
<com.android.providers.downloads.StorageManager: void access$100 (com.android.providers.downloads.StorageManager)> (1)
<com.android.providers.downloads.StorageManager$1: void run ()> (1)
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile (long)> (2)
<com.android.browser.OpenDownloadReceiver: void onReceiveAsync (android.content.Context,long)> (1)
<com.android.emailcommon.utility.AttachmentUtilities: void saveAttachment (android.content.Context,java.io.InputStream,com.android.emailcommon.provider.EmailContent$Attachment)> ()
<com.android.browser.OpenDownloadReceiver: void access$000 (com.android.browser.OpenDownloadReceiver,android.content.Context,long)> (1)
<com.android.browser.OpenDownloadReceiver$1: void run ()> (1)
<com.android.providers.downloads.DownloadService$1: void scanCompleted (java.lang.String,android.net.Uri)> (2)
<android.media.IMediaScannerListener$Stub$Proxy: void scanCompleted (java.lang.String,android.net.Uri)> ()
<android.media.IMediaScannerListener$Stub: void scanCompleted (java.lang.String,android.net.Uri)> (2)
<android.media.IMediaScannerListener$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (3)
<android.media.IMediaScannerListener: void scanCompleted (java.lang.String,android.net.Uri)> (1)
<android.media.MediaScannerConnection$1: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.providers.downloads.DownloadService$1: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.providers.downloads.StorageManager: long discardPurgeableFiles (int,long)> (1)
<com.android.providers.downloads.StorageManager: void findSpace (java.io.File,long,int)> (1)
<com.android.providers.downloads.StorageManager: void verifySpace (int,java.lang.String,long)> (3)
<com.android.providers.downloads.DownloadThread: void writeDataToDestination (com.android.providers.downloads.DownloadThread$State,byte[],int)> (1)
<com.android.providers.downloads.Helpers: java.lang.String generateSaveFile (android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,long,boolean,com.android.providers.downloads.StorageManager)> (1)
<com.android.providers.downloads.StorageManager: void verifySpaceBeforeWritingToFile (int,java.lang.String,long)> (1)
<com.android.providers.downloads.DownloadThread: void transferData (com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState,byte[],java.io.InputStream)> (1)
<com.android.providers.downloads.DownloadThread: void processResponseHeaders (com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState,org.apache.http.HttpResponse)> (1)
<com.android.providers.downloads.DownloadThread: void executeDownload (com.android.providers.downloads.DownloadThread$State,android.net.http.AndroidHttpClient,org.apache.http.client.methods.HttpGet)> (1)
<com.android.providers.downloads.DownloadThread: void run ()> (1)
<com.android.providers.downloads.DownloadInfo: android.net.Uri getMyDownloadsUri ()> (1)
<com.android.providers.downloads.DownloadInfo: void sendIntentIfRequested ()> (1)
<com.android.providers.downloads.DownloadThread: void notifyDownloadCompleted (int,boolean,int,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.providers.downloads.DownloadService$UpdateThread: void run ()> (1)
<android.app.DownloadManager: long addCompletedDownload (java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)> (3)
<com.android.browser.Controller$Download: void saveDataUri ()> (1)
<com.android.email.activity.MessageViewFragmentBase: java.io.File performAttachmentSave (com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (4)
<com.android.browser.Controller$Download: boolean onMenuItemClick (android.view.MenuItem)> (1)
<com.android.email.activity.MessageFileViewFragment: java.io.File performAttachmentSave (com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageViewFragmentBase: void onOpenAttachment (com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (3)
<com.android.email.activity.MessageViewFragmentBase: void onSaveAttachment (com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (3)
<com.android.email.activity.MessageViewFragment: java.io.File performAttachmentSave (com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageFileViewFragment: void onOpenAttachment (com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageViewFragmentBase: void onClick (android.view.View)> (3)
<com.android.email.activity.MessageViewFragment: void onOpenAttachment (com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageFileViewFragment: void onSaveAttachment (com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageViewFragment: void onSaveAttachment (com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageFileViewFragment: void onClick (android.view.View)> (1)
<com.android.email.activity.MessageViewFragment: void onClick (android.view.View)> (1)
<android.app.DownloadManager: long enqueue (android.app.DownloadManager$Request)> (2)
<com.android.browser.DownloadHandler$1: void run ()> (2)
<com.android.browser.FetchUrlMimeType: void run ()> (2)
<com.android.browser.DownloadHandler: void onDownloadStartNoStream (android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> (3)
<com.android.browser.DownloadHandler: void onDownloadStart (android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> (1)
<com.android.browser.Controller: void onDownloadStart (com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.WebViewController: void onDownloadStart (com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (2)
<com.android.browser.Tab$4: void onDownloadStart (java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Tab$7: void onDownloadStart (java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<android.provider.Downloads: void removeAllDownloadsByPackage (android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.server.BootReceiver: void removeOldUpdatePackages (android.content.Context)> (1)
<com.android.server.BootReceiver: void access$100 (com.android.server.BootReceiver,android.content.Context)> (1)
<com.android.server.BootReceiver$1: void run ()> (2)
<com.android.server.BootReceiver: void onReceive (android.content.Context,android.content.Intent)> (1)
<com.android.providers.downloads.DownloadInfo: android.net.Uri getAllDownloadsUri ()> (9)
<com.android.providers.downloads.DownloadInfo$Reader: void readRequestHeaders (com.android.providers.downloads.DownloadInfo)> (1)
<com.android.providers.downloads.DownloadInfo: void notifyPauseDueToSize (boolean)> (1)
<com.android.providers.downloads.DownloadInfo: void startIfReady (long,com.android.providers.downloads.StorageManager)> (2)
<com.android.providers.downloads.DownloadService: boolean scanFile (com.android.providers.downloads.DownloadInfo,boolean,boolean)> (2)
<com.android.providers.downloads.DownloadThread: int readFromResponse (com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState,byte[],java.io.InputStream)> (1)
<com.android.providers.downloads.DownloadThread: void handleEndOfStream (com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState)> (1)
<com.android.providers.downloads.DownloadThread: void notifyThroughDatabase (int,boolean,int,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.providers.downloads.DownloadThread: void reportProgress (com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState)> (1)
<com.android.providers.downloads.DownloadThread: void updateDatabaseFromHeaders (com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState)> (1)
<com.android.providers.downloads.DownloadInfo$Reader: com.android.providers.downloads.DownloadInfo newDownloadInfo (android.content.Context,com.android.providers.downloads.SystemFacade)> (1)
<com.android.providers.downloads.DownloadThread: void checkConnectivity ()> (3)
<com.android.providers.downloads.DownloadService: com.android.providers.downloads.DownloadInfo insertDownloadLocked (com.android.providers.downloads.DownloadInfo$Reader,long)> (1)
<com.android.providers.downloads.DownloadService: void updateDownload (com.android.providers.downloads.DownloadInfo$Reader,com.android.providers.downloads.DownloadInfo,long)> (1)
<com.android.providers.downloads.DownloadService: boolean access$700 (com.android.providers.downloads.DownloadService,com.android.providers.downloads.DownloadInfo,boolean,boolean)> (1)
<com.android.providers.downloads.DownloadService: void deleteDownloadLocked (long)> (1)
<com.android.providers.downloads.DownloadThread: void checkPausedOrCanceled (com.android.providers.downloads.DownloadThread$State)> (1)
<com.android.providers.downloads.DownloadService: com.android.providers.downloads.DownloadInfo access$600 (com.android.providers.downloads.DownloadService,com.android.providers.downloads.DownloadInfo$Reader,long)> (1)
<com.android.providers.downloads.DownloadService: void access$500 (com.android.providers.downloads.DownloadService,com.android.providers.downloads.DownloadInfo$Reader,com.android.providers.downloads.DownloadInfo,long)> (1)
<com.android.providers.downloads.DownloadService: void access$800 (com.android.providers.downloads.DownloadService,long)> (1)
