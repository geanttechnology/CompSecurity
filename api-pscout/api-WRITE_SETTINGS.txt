Permission:android.permission.WRITE_SETTINGS
1106 Callers:
<com.android.server.PowerManagerService: void setStayOnSetting (int)> (2)
<android.os.IPowerManager$Stub$Proxy: void setStayOnSetting (int)> ()
<android.os.IPowerManager$Stub: void setStayOnSetting (int)> (2)
<android.os.IPowerManager$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IPowerManager: void setStayOnSetting (int)> (1)
<com.android.server.PowerManagerService: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.svc.PowerCommand: void run (java.lang.String[])> (1)
<com.android.commands.svc.Svc$Command: void run (java.lang.String[])> (1)
<com.android.commands.svc.Svc: void main (java.lang.String[])> ()
<com.android.server.am.ActivityManagerService: void updatePersistentConfiguration (android.content.res.Configuration)> (1)
<android.app.ActivityManagerNative: void updatePersistentConfiguration (android.content.res.Configuration)> (2)
<android.app.ActivityManagerNative: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void updatePersistentConfiguration (android.content.res.Configuration)> (3)
<com.android.server.am.ActivityManagerService: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.AccessibilitySettings: void handleToggleLargeTextPreferenceClick ()> (1)
<com.android.settings.DisplaySettings: void writeFontSizePreference (java.lang.Object)> (1)
<com.android.settings.Display: void onClick (android.view.View)> (1)
<com.android.settings.AccessibilitySettings: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.DisplaySettings: boolean onPreferenceChange (android.preference.Preference,java.lang.Object)> (1)
<com.android.providers.settings.SettingsBackupAgent: void onRestore (android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
<android.provider.Settings$Bookmarks: android.net.Uri add (android.content.ContentResolver,android.content.Intent,java.lang.String,java.lang.String,char,int)> (1)
<com.android.settings.quicklaunch.QuickLaunchSettings: void updateShortcut (char,android.content.Intent)> (1)
<com.android.settings.quicklaunch.QuickLaunchSettings: void onActivityResult (int,int,android.content.Intent)> (3)
<com.android.settings.quicklaunch.QuickLaunchSettings: void clearShortcut (char)> (1)
<com.android.settings.quicklaunch.QuickLaunchSettings: void onClick (android.content.DialogInterface,int)> (1)
<com.android.providers.settings.SettingsBackupAgent: void onRestoreFile (android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long)> (2)
<android.provider.Settings$System: android.net.Uri getUriFor (java.lang.String)> (19)
<android.media.AudioService$SettingsObserver: void <init> (android.media.AudioService)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void initSeekBar (android.widget.SeekBar,android.net.Uri)> (1)
<android.widget.DateTimeView: void registerReceivers ()> (1)
<com.android.contacts.preference.ContactsPreferences: void registerChangeListener (com.android.contacts.preference.ContactsPreferences$ChangeListener)> (2)
<com.android.internal.policy.impl.GlobalActions: void <init> (android.content.Context,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver: void observe ()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void <init> (com.android.internal.telephony.cdma.CDMAPhone)> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void <init> (com.android.internal.telephony.gsm.GSMPhone)> (1)
<com.android.internal.view.RotationPolicy: void registerRotationPolicyListener (android.content.Context,com.android.internal.view.RotationPolicy$RotationPolicyListener)> (3)
<com.android.server.input.InputManagerService: void registerPointerSpeedSettingObserver ()> (1)
<com.android.server.input.InputManagerService: void registerShowTouchesSettingObserver ()> (1)
<com.android.server.NetworkTimeUpdateService$SettingsObserver: void observe (android.content.Context)> (1)
<com.android.server.NotificationManagerService$SettingsObserver: void observe ()> (1)
<com.android.server.VibratorService: void systemReady ()> (1)
<com.android.settings.AirplaneModeEnabler: void resume ()> (1)
<com.android.settings.BrightnessPreference: void showDialog (android.os.Bundle)> (1)
<com.android.settings.PointerSpeedPreference: void showDialog (android.os.Bundle)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SettingsObserver: void startObserving ()> (1)
<android.media.AudioService: void <init> (android.content.Context)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void <init> (android.preference.VolumePreference,android.content.Context,android.widget.SeekBar,int,android.net.Uri)> (2)
<android.widget.DateTimeView: void onAttachedToWindow ()> (2)
<com.android.contacts.list.ContactEntryListFragment: void onStart ()> (8)
<com.android.contacts.list.PhoneFavoriteFragment: void onStart ()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog ()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void init (android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs,android.os.LocalPowerManager)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void <init> (com.android.internal.telephony.cdma.CDMALTEPhone)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void <init> (com.android.internal.telephony.cdma.CDMAPhone)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void initSstIcc ()> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init> (android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.settings.AccessibilitySettings: void onResume ()> (3)
<com.android.settings.DisplaySettings: void onResume ()> (3)
<com.android.systemui.statusbar.policy.AutoRotateController: void <init> (android.content.Context,android.widget.CompoundButton,com.android.systemui.statusbar.policy.AutoRotateController$RotationLockCallbacks)> (2)
<com.android.server.input.InputManagerService: void start ()> (1)
<com.android.server.NetworkTimeUpdateService: void systemReady ()> (1)
<com.android.server.NotificationManagerService: void <init> (android.content.Context,com.android.server.StatusBarManagerService,com.android.server.LightsService)> (1)
<com.android.server.ServerThread: void run ()> (1)
<com.android.settings.WirelessSettings: void onResume ()> (3)
<com.android.settings.widget.SettingsAppWidgetProvider: void checkObserver (android.content.Context)> (2)
<android.preference.VolumePreference$SeekBarVolumizer: void <init> (android.preference.VolumePreference,android.content.Context,android.widget.SeekBar,int)> (2)
<com.android.settings.RingerVolumePreference: void onBindDialogView (android.view.View)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void onStart ()> (2)
<com.android.contacts.list.ContactPickerFragment: void onStart ()> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onStart ()> (3)
<com.android.contacts.list.EmailAddressPickerFragment: void onStart ()> (2)
<com.android.contacts.list.JoinContactListFragment: void onStart ()> (2)
<com.android.contacts.list.PhoneNumberPickerFragment: void onStart ()> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void onStart ()> (2)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run ()> (1)
<android.view.WindowManagerPolicy: void init (android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs,android.os.LocalPowerManager)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void initSstIcc ()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init> (android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init> (android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init> (android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.settings.SettingsPreferenceFragment: void onResume ()> (28)
<com.android.systemui.statusbar.RotationToggle: void onAttachedToWindow ()> (4)
<com.android.systemui.statusbar.tablet.SettingsView: void onFinishInflate ()> (3)
<com.android.server.wm.WindowManagerService: void <init> (android.content.Context,com.android.server.PowerManagerService,boolean,boolean,boolean)> (1)
<com.android.server.ServerThread$1: void run ()> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onEnabled (android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateWidget (android.content.Context)> (4)
<android.preference.VolumePreference: void onBindDialogView (android.view.View)> (3)
<com.android.server.wm.WindowManagerService$PolicyThread: void run ()> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init> (android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init> (android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone ()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone (android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone ()> (1)
<com.android.settings.accounts.AccountPreferenceBase: void onResume ()> (6)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume ()> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume ()> (3)
<com.android.settings.DateTimeSettings: void onResume ()> (3)
<com.android.settings.deviceinfo.Memory: void onResume ()> (3)
<com.android.settings.deviceinfo.UsbSettings: void onResume ()> (3)
<com.android.settings.DockSettings: void onResume ()> (3)
<com.android.settings.DreamSettings: void onResume ()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume ()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume ()> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onResume ()> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onResume ()> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onResume ()> (3)
<com.android.settings.LocationSettings: void onResume ()> (3)
<com.android.settings.PrivacySettings: void onResume ()> (3)
<com.android.settings.SecuritySettings: void onResume ()> (3)
<com.android.settings.SoundSettings: void onResume ()> (3)
<com.android.settings.users.UserDetailsSettings: void onResume ()> (3)
<com.android.settings.users.UserSettings: void onResume ()> (3)
<com.android.settings.vpn2.VpnSettings: void onResume ()> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onResume ()> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onResume ()> (3)
<com.android.settings.wifi.WifiSettings: void onResume ()> (3)
<com.android.server.wm.WindowManagerService: void <init> (android.content.Context,com.android.server.PowerManagerService,boolean,boolean,boolean,com.android.server.wm.WindowManagerService$1)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute (java.lang.Boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SettingsObserver: void onChange (boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute (java.lang.Boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive (android.content.Context,android.content.Intent)> (2)
<com.android.internal.telephony.PhoneProxy: void deleteAndCreatePhone (int)> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones (android.content.Context)> (1)
<com.android.settings.accounts.AccountSyncSettings: void onResume ()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onResume ()> (4)
<com.android.settings.accounts.SyncSettings: void onResume ()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onResume ()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume ()> (4)
<com.android.server.wm.WindowManagerService$WMThread: void run ()> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute (java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute (java.lang.Object)> (1)
<com.android.internal.telephony.PhoneProxy: void updatePhoneObject (int)> (1)
<com.android.phone.PhoneApp: void onCreate ()> (1)
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService main (android.content.Context,com.android.server.PowerManagerService,boolean,boolean,boolean)> (1)
<android.provider.Settings$Secure: boolean putString (android.content.ContentResolver,java.lang.String,java.lang.String)> (25)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: boolean setAndPersistDeviceName (java.lang.String)> (1)
<android.net.wifi.WifiStateMachine: void setCountryCode (java.lang.String,boolean)> (2)
<android.provider.Settings$Secure: boolean putFloat (android.content.ContentResolver,java.lang.String,float)> ()
<android.provider.Settings$Secure: boolean putInt (android.content.ContentResolver,java.lang.String,int)> (65)
<android.provider.Settings$Secure: boolean putLong (android.content.ContentResolver,java.lang.String,long)> ()
<android.provider.Settings$Secure: void setLocationProviderEnabled (android.content.ContentResolver,java.lang.String,boolean)> (3)
<android.service.dreams.DreamManagerService: void setDreamComponent (android.content.ComponentName)> (2)
<android.speech.tts.TtsEngines: void updateLocalePrefForEngine (java.lang.String,java.lang.String)> (1)
<com.android.server.accessibility.AccessibilityManagerService: void persistComponentNamesToSettingLocked (java.lang.String,java.util.Set)> (1)
<com.android.server.BackupManagerService: java.lang.String selectBackupTransport (java.lang.String)> (2)
<com.android.server.ConnectivityService: void setGlobalProxy (android.net.ProxyProperties)> (3)
<com.android.server.DevicePolicyManagerService: void saveGlobalProxyLocked (java.lang.String,java.lang.String)> (1)
<com.android.server.InputMethodManagerService$InputMethodSettings: void putEnabledInputMethodsStr (java.lang.String)> (3)
<com.android.server.InputMethodManagerService$InputMethodSettings: void putSelectedInputMethod (java.lang.String)> (1)
<com.android.server.InputMethodManagerService$InputMethodSettings: void putSubtypeHistoryStr (java.lang.String)> (1)
<com.android.server.RecognitionManagerService: void setCurRecognizer (android.content.ComponentName)> (2)
<com.android.server.wm.WindowManagerService: void clearForcedDisplaySize ()> (2)
<com.android.server.wm.WindowManagerService: void setForcedDisplaySize (int,int)> (2)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onPreferenceToggled (java.lang.String,boolean)> (2)
<com.android.settings.inputmethod.InputMethodAndSubtypeUtil: void saveInputMethodSubtypeList (com.android.settings.SettingsPreferenceFragment,android.content.ContentResolver,java.util.List,boolean)> (4)
<com.android.settings.OwnerInfoSettings: void saveToDb ()> (1)
<com.android.settings.tts.TextToSpeechSettings: void onVoiceDataIntegrityCheckDone (android.content.Intent)> (1)
<com.android.settings.VoiceInputOutputSettings: boolean onPreferenceChange (android.preference.Preference,java.lang.Object)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: boolean access$2900 (android.net.wifi.p2p.WifiP2pService$P2pStateMachine,java.lang.String)> (1)
<android.net.wifi.WifiStateMachine: void setCountryCode ()> (1)
<com.android.server.WifiService: void setCountryCode (java.lang.String,boolean)> (2)
<android.net.wifi.WifiStateMachine: void setFrequencyBand (int,boolean)> (2)
<android.net.wifi.WifiWatchdogStateMachine: boolean putSettingsBoolean (android.content.ContentResolver,java.lang.String,boolean)> (1)
<android.server.BluetoothA2dpService: boolean setPriority (android.bluetooth.BluetoothDevice,int)> (6)
<android.server.BluetoothInputProfileHandler: boolean setInputDevicePriority (android.bluetooth.BluetoothDevice,int)> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void saveCdmaSubscriptionSource (int)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onSetUserDataEnabled (boolean)> (3)
<com.android.internal.telephony.DataConnectionTracker: void setDataOnRoamingEnabled (boolean)> (4)
<com.android.phone.BluetoothHeadsetService$6: boolean setPriority (android.bluetooth.BluetoothDevice,int)> (2)
<com.android.phone.CallFeaturesSetting: void handleTTYChange (android.preference.Preference,java.lang.Object)> (1)
<com.android.phone.CdmaSubscriptionListPreference$CdmaSubscriptionButtonHandler: void handleSetCdmaSubscriptionMode (android.os.Message)> (1)
<com.android.phone.CdmaSystemSelectListPreference$MyHandler: void handleQueryCdmaRoamingPreference (android.os.Message)> (1)
<com.android.phone.CdmaSystemSelectListPreference$MyHandler: void handleSetCdmaRoamingPreference (android.os.Message)> (1)
<com.android.phone.CdmaSystemSelectListPreference$MyHandler: void resetCdmaRoamingModeToDefault ()> (1)
<com.android.phone.CdmaSystemSelectListPreference: void onDialogClosed (boolean)> (2)
<com.android.phone.CdmaVoicePrivacyCheckBoxPreference$MyHandler: void handleGetVPResponse (android.os.Message)> (1)
<com.android.phone.CellBroadcastSms: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.phone.MobileNetworkSettings: boolean onPreferenceChange (android.preference.Preference,java.lang.Object)> (1)
<com.android.phone.MobileNetworkSettings$MyHandler: void handleGetPreferredNetworkTypeResponse (android.os.Message)> (1)
<com.android.phone.MobileNetworkSettings$MyHandler: void handleSetPreferredNetworkTypeResponse (android.os.Message)> (1)
<com.android.phone.MobileNetworkSettings$MyHandler: void resetNetworkModeToDefault ()> (1)
<com.android.phone.Use2GOnlyCheckBoxPreference$MyHandler: void handleGetPreferredNetworkTypeResponse (android.os.Message)> (1)
<com.android.phone.Use2GOnlyCheckBoxPreference: void onClick ()> (3)
<com.android.provision.DefaultActivity: void onCreate (android.os.Bundle)> (1)
<com.android.server.accessibility.AccessibilityManagerService$MainHanler$2: void onClick (android.content.DialogInterface,int)> (1)
<com.android.server.accessibility.AccessibilityManagerService: void manageServicesLocked ()> (2)
<com.android.server.BackupManagerService: void setAutoRestore (boolean)> (2)
<com.android.server.BackupManagerService: void setBackupEnabled (boolean)> (3)
<com.android.server.ConnectivityService: void handleSetNetworkPreference (int)> (1)
<com.android.server.InputMethodManagerService$InputMethodSettings: void putSelectedSubtype (int)> (1)
<com.android.server.NsdService: void setEnabled (boolean)> (2)
<com.android.server.ThrottleService$MyHandler: void onPolicyChanged ()> (1)
<com.android.server.usb.UsbDeviceManager: void systemReady ()> (1)
<com.android.server.WifiService: boolean testAndClearWifiSavedState ()> (2)
<com.android.server.WifiService: int getPersistedWifiState ()> (1)
<com.android.server.WifiService: void persistWifiState (int)> (2)
<com.android.settings.AccessibilityEnableScriptInjectionPreference: void setSystemSetting (boolean)> (2)
<com.android.settings.AccessibilitySettings: boolean onPreferenceChange (android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.AccessibilitySettings: void handleTogglePowerButtonEndsCallPreferenceClick ()> (1)
<com.android.settings.AccessibilitySettings: void handleToggleSpeakPasswordPreferenceClick ()> (1)
<com.android.settings.ApplicationSettings: void setAdvancedSettingsEnabled (boolean)> (1)
<com.android.settings.DataUsageSummary: void setDataRoaming (boolean)> (2)
<com.android.settings.DevelopmentSettings: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.DevelopmentSettings: void onCheckedChanged (android.widget.CompoundButton,boolean)> (1)
<com.android.settings.DevelopmentSettings: void onClick (android.content.DialogInterface,int)> (1)
<com.android.settings.DevelopmentSettings: void onResume ()> (2)
<com.android.settings.DevelopmentSettings: void writeShowAllANRsOptions ()> (1)
<com.android.settings.DreamSettings: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.DreamSettings: void setScreenSaverEnabled (android.content.Context,boolean)> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void saveInputMethodSelectorVisibility (java.lang.String)> ()
<com.android.settings.inputmethod.InputMethodAndSubtypeUtil: void putSelectedInputMethodSubtype (android.content.ContentResolver,int)> (1)
<com.android.settings.LocationSettings: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.OwnerInfoSettings$1: void onCheckedChanged (android.widget.CompoundButton,boolean)> (1)
<com.android.settings.SecuritySettings: boolean onPreferenceChange (android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.SecuritySettings: void setNonMarketAppsAllowed (boolean)> (2)
<com.android.settings.tts.TextToSpeechSettings: boolean onPreferenceChange (android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.wifi.AdvancedWifiSettings: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.wifi.WifiApEnabler: void setSoftapEnabled (boolean)> (2)
<com.android.providers.settings.SettingsHelper: void setGpsLocation (java.lang.String)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: java.lang.Boolean doInBackground (java.lang.Void[])> (1)
<android.service.dreams.IDreamManager$Stub$Proxy: void setDreamComponent (android.content.ComponentName)> ()
<android.service.dreams.IDreamManager$Stub: void setDreamComponent (android.content.ComponentName)> (2)
<com.android.settings.tts.TtsEngineSettingsFragment: void updateLanguageTo (java.lang.String)> (2)
<com.android.server.accessibility.AccessibilityManagerService: void access$500 (com.android.server.accessibility.AccessibilityManagerService,java.lang.String,java.util.Set)> (3)
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String selectBackupTransport (java.lang.String)> ()
<android.app.backup.IBackupManager$Stub: java.lang.String selectBackupTransport (java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void setGlobalProxy (android.net.ProxyProperties)> ()
<android.net.IConnectivityManager$Stub: void setGlobalProxy (android.net.ProxyProperties)> (2)
<com.android.server.ConnectivityService: void handleDeprecatedGlobalHttpProxy ()> (1)
<com.android.server.DevicePolicyManagerService: void resetGlobalProxyLocked ()> (2)
<com.android.server.InputMethodManagerService$InputMethodSettings: boolean buildAndPutEnabledInputMethodsStrRemovingIdLocked (java.lang.StringBuilder,java.util.List,java.lang.String)> (1)
<com.android.server.InputMethodManagerService$InputMethodSettings: void appendAndPutEnabledInputMethodLocked (java.lang.String,boolean)> (1)
<com.android.server.InputMethodManagerService$InputMethodSettings: void enableAllIMEsIfThereIsNoEnabledIME ()> (1)
<com.android.server.InputMethodManagerService: void setSelectedInputMethodAndSubtypeLocked (android.view.inputmethod.InputMethodInfo,int,boolean)> (3)
<com.android.server.InputMethodManagerService$InputMethodSettings: void saveSubtypeHistory (java.util.List,java.lang.String,java.lang.String)> (1)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onSomePackagesChanged ()> (1)
<com.android.server.RecognitionManagerService: void systemReady ()> (1)
<android.view.IWindowManager$Stub$Proxy: void clearForcedDisplaySize ()> ()
<android.view.IWindowManager$Stub: void clearForcedDisplaySize ()> (2)
<android.view.IWindowManager$Stub$Proxy: void setForcedDisplaySize (int,int)> ()
<android.view.IWindowManager$Stub: void setForcedDisplaySize (int,int)> (2)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment$2: boolean onBeforeCheckedChanged (com.android.settings.AccessibilitySettings$ToggleSwitch,boolean)> (1)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onClick (android.content.DialogInterface,int)> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onPause ()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onPause ()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void setSubtypeAutoSelectionEnabled (java.lang.String,boolean)> (2)
<com.android.settings.inputmethod.InputMethodPreference: void saveImeSettings ()> (1)
<com.android.settings.OwnerInfoSettings: void onPause ()> (1)
<com.android.settings.tts.TextToSpeechSettings: void onActivityResult (int,int,android.content.Intent)> (3)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnabledState: boolean processMessage (android.os.Message)> (1)
<android.net.wifi.WifiStateMachine: void access$7900 (android.net.wifi.WifiStateMachine)> (1)
<android.net.wifi.IWifiManager$Stub$Proxy: void setCountryCode (java.lang.String,boolean)> ()
<android.net.wifi.IWifiManager$Stub: void setCountryCode (java.lang.String,boolean)> (2)
<android.net.wifi.WifiStateMachine: void setFrequencyBand ()> (1)
<com.android.server.WifiService: void setFrequencyBand (int,boolean)> (2)
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine makeWifiWatchdogStateMachine (android.content.Context)> (1)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean setPriority (android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.BluetoothDeviceProfileState: boolean processCommand (int)> (9)
<android.bluetooth.IBluetoothA2dp$Stub: boolean setPriority (android.bluetooth.BluetoothDevice,int)> (2)
<android.server.BluetoothA2dpService: boolean connectSinkInternal (android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: void adjustOtherSinkPriorities (android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: void handleSinkStateChange (android.bluetooth.BluetoothDevice,int,int)> (6)
<android.server.BluetoothInputProfileHandler: void handleInputDeviceStateChange (android.bluetooth.BluetoothDevice,int)> (3)
<android.server.BluetoothInputProfileHandler: void setInitialInputDevicePriority (android.bluetooth.BluetoothDevice,int)> (1)
<android.server.BluetoothService: boolean setInputDevicePriority (android.bluetooth.BluetoothDevice,int)> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void saveCdmaSubscriptionSource (int)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handleCdmaSubscriptionSource (int)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetUserDataEnabled (boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetUserDataEnabled (boolean)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void setDataOnRoamingEnabled (boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setDataRoamingEnabled (boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setDataOnRoamingEnabled (boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setDataRoamingEnabled (boolean)> ()
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean setPriority (android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean setPriority (android.bluetooth.BluetoothDevice,int)> (3)
<com.android.phone.CallFeaturesSetting: boolean onPreferenceChange (android.preference.Preference,java.lang.Object)> (2)
<com.android.server.accessibility.AccessibilityManagerService: void access$300 (com.android.server.accessibility.AccessibilityManagerService)> (4)
<com.android.server.accessibility.AccessibilityManagerService: void handleAccessibilityEnabledSettingChangedLocked ()> (1)
<android.app.backup.IBackupManager$Stub$Proxy: void setAutoRestore (boolean)> ()
<android.app.backup.IBackupManager$Stub: void setAutoRestore (boolean)> (2)
<android.app.backup.IBackupManager$Stub$Proxy: void setBackupEnabled (boolean)> ()
<android.app.backup.IBackupManager$Stub: void setBackupEnabled (boolean)> (2)
<com.android.server.BackupManagerService: void <init> (android.content.Context)> (1)
<com.android.server.ConnectivityService: void access$1800 (com.android.server.ConnectivityService,int)> (2)
<android.net.nsd.INsdManager$Stub$Proxy: void setEnabled (boolean)> ()
<android.net.nsd.INsdManager$Stub: void setEnabled (boolean)> (2)
<com.android.server.usb.UsbService: void systemReady ()> (1)
<com.android.server.WifiService: void checkAndStartWifi ()> (1)
<com.android.server.WifiService: void handleAirplaneModeToggled (boolean)> (1)
<com.android.server.WifiService: void handleWifiToggled (boolean)> (1)
<com.android.settings.AccessibilityEnableScriptInjectionPreference: void onClick ()> (2)
<com.android.settings.AccessibilityEnableScriptInjectionPreference: void onDialogClosed (boolean)> (1)
<com.android.settings.ApplicationSettings: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.DataUsageSummary: boolean onOptionsItemSelected (android.view.MenuItem)> (1)
<com.android.settings.DataUsageSummary: void access$2800 (com.android.settings.DataUsageSummary,boolean)> (1)
<com.android.settings.DevelopmentSettings: void resetDangerousOptions ()> (1)
<com.android.settings.DreamSettings$Enabler: void onCheckedChanged (android.widget.CompoundButton,boolean)> (1)
<com.android.settings.SecuritySettings: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.SecuritySettings: void onClick (android.content.DialogInterface,int)> (1)
<com.android.settings.TetherSettings: boolean onPreferenceChange (android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.TetherSettings: void startTethering ()> (2)
<com.android.providers.settings.SettingsHelper: boolean restoreValue (java.lang.String,java.lang.String)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: java.lang.Object doInBackground (java.lang.Object[])> (1)
<android.service.dreams.IDreamManager$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.service.dreams.IDreamManager: void setDreamComponent (android.content.ComponentName)> (1)
<com.android.settings.tts.TtsEngineSettingsFragment: boolean onPreferenceChange (android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.tts.TtsEngineSettingsFragment: void updateDefaultLocalePref (java.util.ArrayList)> (1)
<com.android.server.accessibility.AccessibilityManagerService$1: boolean onHandleForceStop (android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.accessibility.AccessibilityManagerService$1: void onPackageRemoved (java.lang.String,int)> (1)
<android.app.backup.IBackupManager: java.lang.String selectBackupTransport (java.lang.String)> (1)
<android.app.backup.IBackupManager$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager: void setGlobalProxy (android.net.ProxyProperties)> (1)
<com.android.server.ConnectivityService: void access$2000 (com.android.server.ConnectivityService)> (2)
<com.android.server.DevicePolicyManagerService: void access$200 (com.android.server.DevicePolicyManagerService)> (1)
<com.android.server.InputMethodManagerService: boolean setInputMethodEnabledLocked (java.lang.String,boolean)> (3)
<com.android.server.InputMethodManagerService: void <init> (android.content.Context,com.android.server.wm.WindowManagerService)> (1)
<com.android.server.InputMethodManagerService: void resetDefaultImeLocked (android.content.Context)> (2)
<com.android.server.InputMethodManagerService: void resetSelectedInputMethodAndSubtypeLocked (java.lang.String)> (3)
<com.android.server.InputMethodManagerService$InputMethodSettings: void addSubtypeToHistory (java.lang.String,java.lang.String)> (1)
<com.android.internal.content.PackageMonitor: void onSomePackagesChanged ()> (5)
<android.view.IWindowManager$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void clearForcedDisplaySize ()> (1)
<android.view.IWindowManager: void setForcedDisplaySize (int,int)> (1)
<com.android.settings.AccessibilitySettings$ToggleSwitch$OnBeforeCheckedChangeListener: boolean onBeforeCheckedChanged (com.android.settings.AccessibilitySettings$ToggleSwitch,boolean)> (1)
<com.android.settings.SettingsPreferenceFragment: void onPause ()> (21)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void updateAutoSelectionCB ()> (2)
<com.android.settings.inputmethod.InputMethodPreference: void setChecked (boolean,boolean)> (3)
<com.android.settings.SettingsPreferenceFragment: void onActivityResult (int,int,android.content.Intent)> (7)
<com.android.internal.util.State: boolean processMessage (android.os.Message)> (10)
<android.net.wifi.WifiStateMachine$DriverStartedState: void enter ()> (1)
<android.net.wifi.IWifiManager$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.IWifiManager: void setCountryCode (java.lang.String,boolean)> (1)
<android.net.wifi.WifiStateMachine: void access$8000 (android.net.wifi.WifiStateMachine)> (1)
<android.net.wifi.IWifiManager$Stub$Proxy: void setFrequencyBand (int,boolean)> ()
<android.net.wifi.IWifiManager$Stub: void setFrequencyBand (int,boolean)> (2)
<android.bluetooth.BluetoothDeviceProfileState$BondedDevice: boolean processMessage (android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp: void enter ()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree: void enter ()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHid: void enter ()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp: boolean processMessage (android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp: void enter ()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree: boolean processMessage (android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree: void enter ()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHid: void enter ()> (1)
<android.bluetooth.IBluetoothA2dp: boolean setPriority (android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean connectSinkInternal (android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean connectSinkInternal (android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: boolean disconnectSinkInternal (android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: void access$300 (android.server.BluetoothA2dpService,android.bluetooth.BluetoothDevice,int,int)> (1)
<android.server.BluetoothA2dpService: void onBluetoothDisable ()> (1)
<android.server.BluetoothA2dpService: void onConnectSinkResult (java.lang.String,boolean)> ()
<android.server.BluetoothA2dpService: void onSinkPropertyChanged (java.lang.String,java.lang.String[])> ()
<android.server.BluetoothInputProfileHandler: boolean connectInputDeviceInternal (android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothInputProfileHandler: boolean disconnectInputDeviceInternal (android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothInputProfileHandler: void handleInputDevicePropertyChange (java.lang.String,boolean)> (1)
<android.server.BluetoothBondState: void setProfilePriorities (java.lang.String,int)> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setInputDevicePriority (android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetooth$Stub: boolean setInputDevicePriority (android.bluetooth.BluetoothDevice,int)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handleCdmaSubscriptionSource (int)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setDataRoamingEnabled (boolean)> (1)
<android.bluetooth.IBluetoothHeadset: boolean setPriority (android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.BluetoothHeadsetService: void setPriority (android.bluetooth.BluetoothDevice,int)> (3)
<com.android.phone.CallFeaturesSetting: void onCreate (android.os.Bundle)> (2)
<com.android.server.accessibility.AccessibilityManagerService$1: void onSomePackagesChanged ()> (1)
<com.android.server.accessibility.AccessibilityManagerService$4: void onChange (boolean)> (1)
<com.android.server.accessibility.AccessibilityManagerService$5: void onChange (boolean)> (1)
<com.android.server.accessibility.AccessibilityManagerService$Service: void binderDied ()> (2)
<com.android.server.accessibility.AccessibilityManagerService: void access$900 (com.android.server.accessibility.AccessibilityManagerService)> (3)
<android.app.backup.IBackupManager: void setAutoRestore (boolean)> (2)
<android.app.backup.IBackupManager: void setBackupEnabled (boolean)> (2)
<com.android.server.ConnectivityService: void setNetworkPreference (int)> (2)
<android.net.nsd.INsdManager$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.nsd.INsdManager: void setEnabled (boolean)> (1)
<com.android.server.WifiService: void access$1000 (com.android.server.WifiService,boolean)> (1)
<com.android.settings.DataUsageSummary$ConfirmDataRoamingFragment$1: void onClick (android.content.DialogInterface,int)> (1)
<com.android.settings.TetherSettings: void onActivityResult (int,int,android.content.Intent)> (3)
<com.android.settings.TetherSettings: void startProvisioningIfNecessary (int)> (2)
<com.android.providers.settings.SettingsBackupAgent: void restoreSettings (byte[],int,android.net.Uri)> (2)
<android.service.dreams.DreamManagerService: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.DreamComponentPreference$2: void onClick (android.content.DialogInterface,int)> (1)
<com.android.settings.tts.TtsEngineSettingsFragment: void updateVoiceDetails ()> (1)
<com.android.internal.content.PackageMonitor: boolean onHandleForceStop (android.content.Intent,java.lang.String[],int,boolean)> (12)
<com.android.internal.content.PackageMonitor: void onPackageRemoved (java.lang.String,int)> (11)
<com.android.commands.bmgr.Bmgr: void doTransport ()> (1)
<com.android.server.BackupManagerService: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ConnectivityService: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.ConnectivityManager: void setGlobalProxy (android.net.ProxyProperties)> (1)
<com.android.server.ConnectivityService: void systemReady ()> (1)
<com.android.server.DevicePolicyManagerService$2: void onReceive (android.content.Context,android.content.Intent)> (1)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onSomePackagesChanged ()> (1)
<com.android.server.InputMethodManagerService: void buildInputMethodListLocked (java.util.ArrayList,java.util.HashMap)> (5)
<com.android.server.InputMethodManagerService: void checkCurrentLocaleChangedLocked ()> (2)
<com.android.server.InputMethodManagerService: boolean chooseNewDefaultIMELocked ()> (4)
<com.android.server.InputMethodManagerService: void access$200 (com.android.server.InputMethodManagerService,java.lang.String)> (2)
<com.android.server.InputMethodManagerService: void saveCurrentInputMethodAndSubtypeToHistory ()> (1)
<com.android.internal.content.PackageMonitor: void onReceive (android.content.Context,android.content.Intent)> (15)
<com.android.server.am.UsageStatsService$2: void onSomePackagesChanged ()> (1)
<com.android.server.LocationManagerService$2: void onSomePackagesChanged ()> (1)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void onSomePackagesChanged ()> (1)
<com.android.settings.AccessibilitySettings$SettingsPackageMonitor: void onSomePackagesChanged ()> (1)
<com.android.server.wm.WindowManagerService: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.am.Am: void runDisplaySize ()> (1)
<com.android.settings.AccessibilitySettings$ToggleSwitch: void setChecked (boolean)> (2)
<com.android.settings.AccessibilitySettings: void onPause ()> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onPause ()> (6)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onPause ()> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onPause ()> (3)
<com.android.settings.DateTimeSettings: void onPause ()> (3)
<com.android.settings.deviceinfo.Memory: void onPause ()> (3)
<com.android.settings.deviceinfo.UsbSettings: void onPause ()> (3)
<com.android.settings.DisplaySettings: void onPause ()> (3)
<com.android.settings.DockSettings: void onPause ()> (3)
<com.android.settings.DreamSettings: void onPause ()> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onPause ()> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onPause ()> (3)
<com.android.settings.tts.TextToSpeechSettings: void onPause ()> (3)
<com.android.settings.vpn2.VpnSettings: void onPause ()> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onPause ()> (3)
<com.android.settings.wifi.WifiSettings: void onPause ()> (3)
<com.android.settings.WirelessSettings: void onPause ()> (3)
<com.android.settings.inputmethod.InputMethodPreference$1: void onClick (android.view.View)> (1)
<com.android.settings.inputmethod.InputMethodPreference$6: void onClick (android.content.DialogInterface,int)> (1)
<com.android.settings.inputmethod.InputMethodPreference: void setChecked (boolean)> (2)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityResult (int,int,android.content.Intent)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onActivityResult (int,int,android.content.Intent)> (3)
<com.android.settings.LocationSettings: void onActivityResult (int,int,android.content.Intent)> (3)
<com.android.settings.SecuritySettings: void onActivityResult (int,int,android.content.Intent)> (3)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage (android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage (android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage (android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage (android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage (android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$InitialState: boolean processMessage (android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage (android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineState: boolean processMessage (android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage (android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: void processMsg (android.os.Message)> (1)
<com.android.internal.util.State: void enter ()> (19)
<com.android.server.WifiService: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiManager: void setCountryCode (java.lang.String,boolean)> (2)
<android.net.wifi.IWifiManager: void setFrequencyBand (int,boolean)> (1)
<android.bluetooth.BluetoothA2dp: boolean setPriority (android.bluetooth.BluetoothDevice,int)> (2)
<android.server.BluetoothA2dpService: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothA2dp: boolean connectSinkInternal (android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean disconnectSinkInternal (android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean disconnectSinkInternal (android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService$1: void onReceive (android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothA2dpService: void access$100 (android.server.BluetoothA2dpService)> (1)
<android.server.BluetoothService: boolean connectInputDeviceInternal (android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: boolean disconnectInputDeviceInternal (android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: void handleInputDevicePropertyChange (java.lang.String,boolean)> (2)
<android.server.BluetoothBondState: void setBondState (java.lang.String,int,int)> (5)
<android.bluetooth.IBluetooth: boolean setInputDevicePriority (android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.IBluetooth$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothHeadset: boolean setPriority (android.bluetooth.BluetoothDevice,int)> (4)
<com.android.phone.BluetoothHeadsetService$6: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.BluetoothHeadsetService: void adjustOtherHeadsetPriorities (android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService: void getSdpRecordsAndConnect (android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService: void setState (android.bluetooth.BluetoothDevice,int)> (3)
<com.android.server.accessibility.AccessibilityManagerService: void unregisterUiTestAutomationService (android.accessibilityservice.IAccessibilityServiceClient)> (2)
<com.android.server.accessibility.AccessibilityManagerService$1: void onReceive (android.content.Context,android.content.Intent)> (2)
<com.android.server.accessibility.AccessibilityManagerService$2: void onChange (boolean)> (1)
<com.android.providers.settings.SettingsHelper: void setAutoRestore (boolean)> (1)
<com.android.settings.PrivacySettings: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.commands.bmgr.Bmgr: void doEnable ()> (1)
<com.android.settings.PrivacySettings: void setBackupEnabled (boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference (int)> ()
<android.net.IConnectivityManager$Stub: void setNetworkPreference (int)> (2)
<com.android.server.NsdService: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.nsd.NsdManager: void setEnabled (boolean)> (1)
<com.android.server.WifiService$1: void onReceive (android.content.Context,android.content.Intent)> (1)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.providers.settings.SettingsBackupAgent: void restoreSettings (android.app.backup.BackupDataInput,android.net.Uri)> (1)
<com.android.settings.tts.TtsEngineSettingsFragment: void access$100 (com.android.settings.tts.TtsEngineSettingsFragment)> (1)
<android.server.search.SearchManagerService$MyPackageMonitor: boolean onHandleForceStop (android.content.Intent,java.lang.String[],int,boolean)> (1)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: boolean onHandleForceStop (android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.internal.app.ResolverActivity$1: boolean onHandleForceStop (android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.providers.applications.ApplicationsProvider$MyPackageMonitor: boolean onHandleForceStop (android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.am.UsageStatsService$2: boolean onHandleForceStop (android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.DevicePolicyManagerService$MyPackageMonitor: boolean onHandleForceStop (android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.LocationManagerService$2: boolean onHandleForceStop (android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.RecognitionManagerService$MyPackageMonitor: boolean onHandleForceStop (android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.TextServicesManagerService$TextServicesMonitor: boolean onHandleForceStop (android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: boolean onHandleForceStop (android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.settings.AccessibilitySettings$SettingsPackageMonitor: boolean onHandleForceStop (android.content.Intent,java.lang.String[],int,boolean)> (1)
<android.server.search.SearchManagerService$MyPackageMonitor: void onPackageRemoved (java.lang.String,int)> (1)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: void onPackageRemoved (java.lang.String,int)> (1)
<com.android.internal.app.ResolverActivity$1: void onPackageRemoved (java.lang.String,int)> (1)
<com.android.providers.applications.ApplicationsProvider$MyPackageMonitor: void onPackageRemoved (java.lang.String,int)> (1)
<com.android.server.DevicePolicyManagerService$MyPackageMonitor: void onPackageRemoved (java.lang.String,int)> (1)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onPackageRemoved (java.lang.String,int)> (1)
<com.android.server.LocationManagerService$2: void onPackageRemoved (java.lang.String,int)> (1)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onPackageRemoved (java.lang.String,int)> (1)
<com.android.server.TextServicesManagerService$TextServicesMonitor: void onPackageRemoved (java.lang.String,int)> (1)
<com.android.server.WallpaperManagerService$MyPackageMonitor: void onPackageRemoved (java.lang.String,int)> (1)
<com.android.commands.bmgr.Bmgr: void run (java.lang.String[])> (1)
<com.android.settings.ProxySelector: boolean saveToDb ()> (1)
<com.android.server.InputMethodManagerService: void systemReady (com.android.server.StatusBarManagerService)> (1)
<com.android.server.InputMethodManagerService: void access$900 (com.android.server.InputMethodManagerService)> (1)
<com.android.server.InputMethodManagerService: boolean access$300 (com.android.server.InputMethodManagerService)> (2)
<com.android.server.InputMethodManagerService: void updateFromSettingsLocked ()> (5)
<com.android.server.InputMethodManagerService$MyPackageMonitor: boolean onHandleForceStop (android.content.Intent,java.lang.String[],int,boolean)> (1)
<android.server.search.SearchManagerService$MyPackageMonitor: void onReceive (android.content.Context,android.content.Intent)> (2)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: void onReceive (android.content.Context,android.content.Intent)> (2)
<com.android.internal.app.ResolverActivity$1: void onReceive (android.content.Context,android.content.Intent)> (2)
<com.android.providers.applications.ApplicationsProvider$MyPackageMonitor: void onReceive (android.content.Context,android.content.Intent)> (2)
<com.android.server.am.UsageStatsService$2: void onReceive (android.content.Context,android.content.Intent)> (2)
<com.android.server.DevicePolicyManagerService$MyPackageMonitor: void onReceive (android.content.Context,android.content.Intent)> (2)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onReceive (android.content.Context,android.content.Intent)> (2)
<com.android.server.LocationManagerService$2: void onReceive (android.content.Context,android.content.Intent)> (2)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onReceive (android.content.Context,android.content.Intent)> (2)
<com.android.server.TextServicesManagerService$TextServicesMonitor: void onReceive (android.content.Context,android.content.Intent)> (2)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void onReceive (android.content.Context,android.content.Intent)> (2)
<com.android.server.WallpaperManagerService$MyPackageMonitor: void onReceive (android.content.Context,android.content.Intent)> (2)
<com.android.settings.AccessibilitySettings$SettingsPackageMonitor: void onReceive (android.content.Context,android.content.Intent)> (2)
<com.android.commands.am.Am: void run (java.lang.String[])> (1)
<com.android.settings.accounts.AccountSyncSettings: void onPause ()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onPause ()> (4)
<com.android.settings.accounts.SyncSettings: void onPause ()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onPause ()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onPause ()> (4)
<android.net.DhcpStateMachine$DefaultState: void enter ()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter ()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState: void enter ()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter ()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter ()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter ()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter ()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter ()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter ()> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void enter ()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void enter ()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void enter ()> (1)
<com.android.internal.util.IState: void enter ()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter ()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter ()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods (int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter ()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter ()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter ()> (1)
<com.android.internal.telephony.MccTable: void setWifiCountryCodeFromMcc (android.content.Context,int)> (1)
<com.android.internal.telephony.PhoneBase: void setPropertiesByCarrier ()> (6)
<android.net.wifi.WifiManager: void setFrequencyBand (int,boolean)> (1)
<com.android.settings.bluetooth.A2dpProfile: void setPreferred (android.bluetooth.BluetoothDevice,boolean)> (1)
<android.bluetooth.IBluetoothA2dp: boolean disconnectSinkInternal (android.bluetooth.BluetoothDevice)> ()
<android.server.BluetoothEventLoop: void onInputDeviceConnectionResult (java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onInputDevicePropertyChanged (java.lang.String,java.lang.String[])> ()
<android.server.BluetoothBondState: void setBondState (java.lang.String,int)> (2)
<android.server.BluetoothService: boolean cancelBondProcess (java.lang.String)> (2)
<android.server.BluetoothService: boolean cancelPairingUserInput (java.lang.String)> (3)
<android.server.BluetoothService: boolean setBondState (java.lang.String,int,int)> (5)
<android.server.BluetoothService: void finishDisable ()> (2)
<android.bluetooth.BluetoothInputDevice: boolean setPriority (android.bluetooth.BluetoothDevice,int)> (1)
<android.server.BluetoothService: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.bluetooth.HeadsetProfile: boolean disconnect (android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HeadsetProfile: void setPreferred (android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.phone.BluetoothHeadsetService: void access$1500 (com.android.phone.BluetoothHeadsetService,android.bluetooth.BluetoothDevice)> (3)
<com.android.phone.BluetoothHeadsetService: void access$2000 (com.android.phone.BluetoothHeadsetService,android.bluetooth.BluetoothDevice,int)> (6)
<com.android.phone.BluetoothHeadsetService: void onDestroy ()> (1)
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void unregisterUiTestAutomationService (android.accessibilityservice.IAccessibilityServiceClient)> ()
<android.view.accessibility.IAccessibilityManager$Stub: void unregisterUiTestAutomationService (android.accessibilityservice.IAccessibilityServiceClient)> (2)
<com.android.settings.PrivacySettings: void onClick (android.content.DialogInterface,int)> (1)
<android.net.IConnectivityManager: void setNetworkPreference (int)> (3)
<com.android.settings.NsdEnabler: boolean onPreferenceChange (android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.tts.TtsEngineSettingsFragment$1$1: void run ()> (1)
<com.android.commands.bmgr.Bmgr: void main (java.lang.String[])> ()
<com.android.settings.ProxySelector$1: void onClick (android.view.View)> (1)
<com.android.server.InputMethodManagerService$3: void onReceive (android.content.Context,android.content.Intent)> (1)
<com.android.server.InputMethodManagerService$SettingsObserver: void onChange (boolean)> (1)
<com.android.commands.am.Am: void main (java.lang.String[])> ()
<com.android.internal.util.StateMachine$SmHandler: void performTransitions ()> (1)
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration (android.content.Context,java.lang.String)> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setPropertiesByCarrier ()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setPropertiesByCarrier ()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setPropertiesByCarrier ()> (1)
<com.android.internal.telephony.PhoneBase: void <init> (com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (10)
<com.android.internal.telephony.sip.SipPhoneBase: void setPropertiesByCarrier ()> (1)
<com.android.internal.telephony.sip.SipPhone: void setPropertiesByCarrier ()> (1)
<com.android.settings.wifi.AdvancedWifiSettings: boolean onPreferenceChange (android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfile: void setPreferred (android.bluetooth.BluetoothDevice,boolean)> (4)
<android.server.BluetoothService: boolean createBond (java.lang.String)> (3)
<android.server.BluetoothService: boolean createBondOutOfBand (java.lang.String,byte[],byte[])> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelBondProcess (java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelBondProcess (java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelPairingUserInput (java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelPairingUserInput (java.lang.String)> (2)
<android.server.BluetoothEventLoop: java.lang.String checkPairingRequestAndGetAddress (java.lang.String,int)> (6)
<android.server.BluetoothEventLoop: void onDeviceRemoved (java.lang.String)> ()
<android.server.BluetoothService: boolean setBondState (java.lang.String,int)> (3)
<android.server.BluetoothService: void onCreatePairedDeviceResult (java.lang.String,int)> (1)
<android.server.BluetoothService: void pairingAttempt (java.lang.String,int)> (1)
<android.server.BluetoothAdapterStateMachine$Switching: boolean processMessage (android.os.Message)> (1)
<android.server.BluetoothAdapterStateMachine: void finishSwitchingOff ()> (1)
<com.android.settings.bluetooth.HidProfile: void setPreferred (android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean disconnect (android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService$2: void onReceive (android.content.Context,android.content.Intent)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean connectHeadsetInternal (android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean acceptIncomingConnect (android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean createIncomingConnect (android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean disconnectHeadsetInternal (android.bluetooth.BluetoothDevice)> (2)
<android.view.accessibility.IAccessibilityManager$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.accessibility.IAccessibilityManager: void unregisterUiTestAutomationService (android.accessibilityservice.IAccessibilityServiceClient)> (1)
<android.net.ConnectivityManager: void setNetworkPreference (int)> ()
<com.android.commands.svc.DataCommand: void run (java.lang.String[])> (1)
<com.android.commands.svc.WifiCommand: void run (java.lang.String[])> (1)
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider (java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init> (com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init> (com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init> (com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.PhoneBase: void <init> (com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (5)
<com.android.internal.telephony.sip.SipPhoneBase: void <init> (android.content.Context,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void <init> (com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init> (com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAutoConnectableProfiles ()> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings$1: void onClick (android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onProfileClicked (com.android.settings.bluetooth.LocalBluetoothProfile)> (1)
<com.android.settings.bluetooth.DockService: void applyBtSettings (android.bluetooth.BluetoothDevice,int)> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBond (java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean createBond (java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBondOutOfBand (java.lang.String,byte[],byte[])> ()
<android.bluetooth.IBluetooth$Stub: boolean createBondOutOfBand (java.lang.String,byte[],byte[])> (2)
<android.bluetooth.IBluetooth: boolean cancelBondProcess (java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean cancelPairingUserInput (java.lang.String)> (1)
<android.server.BluetoothEventLoop: void onDisplayPasskey (java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestOobData (java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPairingConsent (java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskeyConfirmation (java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskey (java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPinCode (java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onDevicePropertyChanged (java.lang.String,java.lang.String[])> ()
<android.server.BluetoothEventLoop: void onCreatePairedDeviceResult (java.lang.String,int)> ()
<android.server.BluetoothAdapterStateMachine: void access$5300 (android.server.BluetoothAdapterStateMachine)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect (com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean connectHeadsetInternal (android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean connectHeadsetInternal (android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean acceptIncomingConnect (android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean acceptIncomingConnect (android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean createIncomingConnect (android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean createIncomingConnect (android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean disconnectHeadsetInternal (android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean disconnectHeadsetInternal (android.bluetooth.BluetoothDevice)> (2)
<com.android.server.accessibility.AccessibilityManagerService: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accessibilityservice.UiTestAutomationBridge: void disconnect ()> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: boolean updateCurrentCarrierInProvider (java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void init (android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init> (com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init> (com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init> (com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void <init> (com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init> (com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init> (android.content.Context,com.android.internal.telephony.PhoneNotifier,android.net.sip.SipProfile)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init> (android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer (boolean)> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceChange (android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.bluetooth.DockService: void access$700 (com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBluetoothStateOn (int)> (1)
<com.android.settings.bluetooth.DockService: void handleDocked (android.bluetooth.BluetoothDevice,int,int)> (2)
<android.bluetooth.IBluetooth: boolean createBond (java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean createBondOutOfBand (java.lang.String,byte[],byte[])> (1)
<android.bluetooth.BluetoothDevice: boolean cancelBondProcess ()> (1)
<android.bluetooth.BluetoothDevice: boolean cancelPairingUserInput ()> (1)
<android.server.BluetoothAdapterStateMachine$PerProcessState: boolean processMessage (android.os.Message)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect ()> (3)
<android.bluetooth.IBluetoothHeadset: boolean connectHeadsetInternal (android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset: boolean acceptIncomingConnect (android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset: boolean createIncomingConnect (android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset: boolean disconnectHeadsetInternal (android.bluetooth.BluetoothDevice)> (1)
<com.android.commands.uiautomator.DumpCommand: void run (java.lang.String[])> (1)
<com.android.commands.uiautomator.EventsCommand$1: void disconnect ()> (1)
<com.android.uiautomator.core.UiAutomatorBridge: void disconnect ()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init (android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.sip.SipPhoneFactory: com.android.internal.telephony.sip.SipPhone makePhone (java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect (boolean)> (5)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged ()> (1)
<com.android.settings.bluetooth.DockService$5: void onClick (android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBtStateChange (android.content.Intent,int)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeDocked (android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DockService: void access$200 (com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int,int)> (1)
<android.bluetooth.BluetoothDevice: boolean createBond ()> (2)
<android.bluetooth.BluetoothDevice: boolean createBondOutOfBand (byte[],byte[])> ()
<com.android.settings.bluetooth.CachedBluetoothDevice: void unpair ()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCancel ()> (2)
<com.android.settings.bluetooth.BluetoothDevicePreference$1: void onClick (android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void handleUndocked (android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothHeadset: boolean connectHeadsetInternal (android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean acceptIncomingConnect (android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean createIncomingConnect (android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean disconnectHeadsetInternal (android.bluetooth.BluetoothDevice)> (1)
<com.android.commands.uiautomator.Launcher$Command: void run (java.lang.String[])> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.sip.SipPhone makeSipPhone (java.lang.String)> (2)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onClicked ()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingDockConnect ()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged (int)> (1)
<com.android.settings.bluetooth.DockService: void connectIfEnabled (android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged (android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: int onStartCommand (android.content.Intent,int,int)> (1)
<com.android.settings.bluetooth.DockService: void processMessage (android.os.Message)> (2)
<com.android.settings.bluetooth.DockService$1: void run ()> (1)
<com.android.nfc.handover.BluetoothHeadsetHandover: void startBonding ()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean startPairing ()> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void unpairDevice ()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: boolean onKeyDown (int,android.view.KeyEvent)> (2)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onClick (android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeUndockedPermanent (android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.BluetoothDeviceProfileState: boolean handleIncomingConnection (int,boolean)> (2)
<com.android.commands.uiautomator.Launcher: void main (java.lang.String[])> ()
<com.android.phone.SipBroadcastReceiver: void onReceive (android.content.Context,android.content.Intent)> (1)
<com.android.phone.SipCallOptionHandler: void createSipPhoneIfNeeded (android.net.sip.SipProfile)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onDevicePreferenceClick (com.android.settings.bluetooth.BluetoothDevicePreference)> (3)
<com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler: void onReceive (android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler: void onReceive (android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: void access$100 (com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<com.android.nfc.handover.BluetoothHeadsetHandover: void nextStepConnect ()> (2)
<com.android.settings.bluetooth.BluetoothDevicePreference: void pair ()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean ensurePaired ()> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (1)
<android.bluetooth.BluetoothDeviceProfileState: boolean access$6700 (android.bluetooth.BluetoothDeviceProfileState,int,boolean)> (3)
<android.bluetooth.BluetoothDeviceProfileState: void processIncomingConnectCommand (int)> (1)
<com.android.phone.SipCallOptionHandler: void access$300 (com.android.phone.SipCallOptionHandler,android.net.sip.SipProfile)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onDevicePreferenceClick (com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (3)
<com.android.settings.bluetooth.DevicePickerFragment: void onDevicePreferenceClick (com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$Handler: void onReceive (android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.nfc.handover.BluetoothHeadsetHandover: void handleIntent (android.content.Intent)> (1)
<com.android.nfc.handover.BluetoothHeadsetHandover: void nextStep ()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectInt (com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp: boolean processMessage (android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree: boolean processMessage (android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHid: boolean processMessage (android.os.Message)> (1)
<com.android.phone.SipCallOptionHandler$1: void run ()> (1)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.DevicePickerFragment: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.BluetoothEventManager$1: void onReceive (android.content.Context,android.content.Intent)> (1)
<com.android.nfc.handover.BluetoothHeadsetHandover$2: void onReceive (android.content.Context,android.content.Intent)> (1)
<com.android.nfc.handover.BluetoothHeadsetHandover: void start ()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectProfile (com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<com.android.nfc.handover.HandoverManager: boolean tryHandover (android.nfc.NdefMessage)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect (android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfile,int)> (1)
<com.android.nfc.NfcDispatcher: boolean dispatchTag (android.nfc.Tag)> (4)
<com.android.nfc.NfcService$NfcAdapterService: void dispatch (android.nfc.Tag)> (2)
<com.android.nfc.NfcService$NfcServiceHandler: void dispatchTagEndpoint (com.android.nfc.DeviceHost$TagEndpoint)> (2)
<com.android.nfc.NfcService: void sendMessage (int,java.lang.Object)> (11)
<android.nfc.INfcAdapter$Stub$Proxy: void dispatch (android.nfc.Tag)> ()
<android.nfc.INfcAdapter$Stub: void dispatch (android.nfc.Tag)> (2)
<com.android.nfc.NfcService: void onCardEmulationAidSelected (byte[])> (1)
<com.android.nfc.NfcService: void onCardEmulationDeselected ()> (1)
<com.android.nfc.NfcService: void onLlcpLinkActivated (com.android.nfc.DeviceHost$NfcDepEndpoint)> (1)
<com.android.nfc.NfcService: void onLlcpLinkDeactivated (com.android.nfc.DeviceHost$NfcDepEndpoint)> (1)
<com.android.nfc.NfcService: void onRemoteEndpointDiscovered (com.android.nfc.DeviceHost$TagEndpoint)> (1)
<com.android.nfc.NfcService: void onRemoteFieldActivated ()> (1)
<com.android.nfc.NfcService: void onRemoteFieldDeactivated ()> (1)
<com.android.nfc.NfcService: void onSeApduReceived (byte[])> (1)
<com.android.nfc.NfcService: void onSeEmvCardRemoval ()> (1)
<com.android.nfc.NfcService: void onSeMifareAccess (byte[])> (1)
<com.android.nfc.NfcService: void sendMockNdefTag (android.nfc.NdefMessage)> (1)
<android.nfc.INfcAdapter$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.nfc.INfcAdapter: void dispatch (android.nfc.Tag)> (1)
<com.android.nfc.DeviceHost$DeviceHostListener: void onCardEmulationAidSelected (byte[])> (1)
<com.android.nfc.DeviceHost$DeviceHostListener: void onCardEmulationDeselected ()> (1)
<com.android.nfc.DeviceHost$DeviceHostListener: void onLlcpLinkActivated (com.android.nfc.DeviceHost$NfcDepEndpoint)> (1)
<com.android.nfc.DeviceHost$DeviceHostListener: void onLlcpLinkDeactivated (com.android.nfc.DeviceHost$NfcDepEndpoint)> (1)
<com.android.nfc.DeviceHost$DeviceHostListener: void onRemoteEndpointDiscovered (com.android.nfc.DeviceHost$TagEndpoint)> (1)
<com.android.nfc.DeviceHost$DeviceHostListener: void onRemoteFieldActivated ()> (1)
<com.android.nfc.DeviceHost$DeviceHostListener: void onRemoteFieldDeactivated ()> (1)
<com.android.nfc.DeviceHost$DeviceHostListener: void onSeApduReceived (byte[])> (1)
<com.android.nfc.DeviceHost$DeviceHostListener: void onSeEmvCardRemoval ()> (1)
<com.android.nfc.DeviceHost$DeviceHostListener: void onSeMifareAccess (byte[])> (1)
<com.android.nfc.NfcService$NfcAdapterService: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.nfc.NfcAdapter: void dispatch (android.nfc.Tag)> ()
<com.android.nfc.nxp.NativeNfcManager: void notifyTransactionListeners (byte[])> ()
<com.android.nfc.nxp.NativeNfcManager: void notifyTargetDeselected ()> ()
<com.android.nfc.nxp.NativeNfcManager: void notifyLlcpLinkActivation (com.android.nfc.nxp.NativeP2pDevice)> ()
<com.android.nfc.nxp.NativeNfcManager: void notifyLlcpLinkDeactivated (com.android.nfc.nxp.NativeP2pDevice)> ()
<com.android.nfc.nxp.NativeNfcManager: void notifyNdefMessageListeners (com.android.nfc.nxp.NativeNfcTag)> ()
<com.android.nfc.nxp.NativeNfcManager: void notifySeFieldActivated ()> ()
<com.android.nfc.nxp.NativeNfcManager: void notifySeFieldDeactivated ()> ()
<com.android.nfc.nxp.NativeNfcManager: void notifySeApduReceived (byte[])> ()
<com.android.nfc.nxp.NativeNfcManager: void notifySeEmvCardRemoval ()> ()
<com.android.nfc.nxp.NativeNfcManager: void notifySeMifareAccess (byte[])> ()
<android.provider.Settings$Secure: android.net.Uri getUriFor (java.lang.String)> (20)
<android.net.wifi.WifiWatchdogStateMachine: void registerForSettingsChanges ()> (1)
<android.net.wifi.WifiWatchdogStateMachine: void registerForWatchdogToggle ()> (1)
<android.server.search.SearchManagerService$GlobalSearchProviderObserver: void <init> (android.server.search.SearchManagerService,android.content.ContentResolver)> (1)
<com.android.browser.SystemAllowGeolocationOrigins: void start ()> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void <init> (android.content.Context)> (1)
<com.android.internal.telephony.DataConnectionTracker$DataRoamingSettingObserver: void register (android.content.Context)> (1)
<com.android.server.accessibility.AccessibilityManagerService: void registerSettingsContentObservers ()> (1)
<com.android.server.am.CoreSettingsObserver: void beginObserveCoreSettings ()> (1)
<com.android.server.CertBlacklister: void registerObservers (android.content.ContentResolver)> (1)
<com.android.server.ConnectivityService$SettingsObserver: void observe (android.content.Context)> (1)
<com.android.server.InputMethodManagerService$SettingsObserver: void <init> (com.android.server.InputMethodManagerService,android.os.Handler)> (1)
<com.android.server.NsdService$NsdStateMachine: void registerForNsdSetting ()> (1)
<com.android.server.SamplingProfilerService: void registerSettingObserver (android.content.Context)> (1)
<com.android.server.ThrottleService$SettingsObserver: void register (android.content.Context)> (1)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void <init> (com.android.server.usb.UsbDeviceManager,android.os.Looper)> (1)
<com.android.server.WifiService$NotificationEnabledSettingObserver: void register ()> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings$SettingsObserver: void <init> (com.android.settings.inputmethod.InputMethodAndLanguageSettings,android.os.Handler,android.content.Context)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void start ()> (3)
<android.net.wifi.WifiWatchdogStateMachine: void <init> (android.content.Context)> (1)
<android.server.search.SearchManagerService: void <init> (android.content.Context)> (1)
<com.android.browser.Controller: void <init> (android.app.Activity)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void <init> (android.content.Context,com.android.internal.policy.impl.PhoneWindowManager,android.os.LocalPowerManager)> (1)
<com.android.internal.telephony.DataConnectionTracker: void <init> (com.android.internal.telephony.PhoneBase)> (3)
<com.android.server.accessibility.AccessibilityManagerService: void <init> (android.content.Context)> (1)
<com.android.server.am.CoreSettingsObserver: void <init> (com.android.server.am.ActivityManagerService)> (1)
<com.android.server.CertBlacklister: void <init> (android.content.Context)> (1)
<com.android.server.ConnectivityService: void <init> (android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager)> (1)
<com.android.server.NsdService$NsdStateMachine: void <init> (com.android.server.NsdService,java.lang.String)> (1)
<com.android.server.SamplingProfilerService: void <init> (android.content.Context)> (1)
<com.android.server.ThrottleService: void systemReady ()> (1)
<com.android.server.usb.UsbDeviceManager: void <init> (android.content.Context,com.android.server.usb.UsbSettingsManager)> (1)
<com.android.server.WifiService: void <init> (android.content.Context)> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onCreate (android.os.Bundle)> (3)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void start ()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void start ()> (2)
<com.android.systemui.SystemUI: void start ()> (1)
<com.android.browser.BrowserActivity: com.android.browser.Controller createController ()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init> (com.android.internal.telephony.cdma.CDMAPhone)> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init> (com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <init> (com.android.internal.telephony.PhoneBase)> (3)
<com.android.server.am.ActivityManagerService: void installSystemProviders ()> (1)
<com.android.server.NsdService: void <init> (android.content.Context)> (1)
<com.android.server.usb.UsbService: void <init> (android.content.Context)> (1)
<com.android.settings.SettingsPreferenceFragment: void onCreate (android.os.Bundle)> (37)
<com.android.systemui.SystemUIService: void onCreate ()> (1)
<com.android.browser.BrowserActivity: void onCreate (android.os.Bundle)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone ()> (2)
<com.android.server.NsdService: com.android.server.NsdService create (android.content.Context)> (1)
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onCreate (android.os.Bundle)> (3)
<com.android.settings.AccessibilitySettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onCreate (android.os.Bundle)> (6)
<com.android.settings.ApplicationSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onCreate (android.os.Bundle)> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onCreate (android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onCreate (android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.deviceinfo.UsbSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.DockSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.DreamSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onCreate (android.os.Bundle)> (3)
<com.android.settings.inputmethod.KeyboardLayoutPickerFragment: void onCreate (android.os.Bundle)> (3)
<com.android.settings.inputmethod.SpellCheckersSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.inputmethod.UserDictionaryList: void onCreate (android.os.Bundle)> (3)
<com.android.settings.LocationSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.net.DataUsageMeteredSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.tts.TextToSpeechSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.tts.TtsEngineSettingsFragment: void onCreate (android.os.Bundle)> (3)
<com.android.settings.users.UserDetailsSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.users.UserSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.vpn2.VpnSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.WallpaperTypeSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedWifiSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.wifi.p2p.WifiP2pSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.wifi.WifiSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onCreate (android.os.Bundle)> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState ()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone ()> (2)
<com.android.settings.accounts.AccountSyncSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.accounts.ManageAccountsSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.accounts.SyncSettings: void onCreate (android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onCreate (android.os.Bundle)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onCreate (android.os.Bundle)> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState ()> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult (int,android.os.AsyncResult)> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads ()> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll ()> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult (int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult (int,android.os.AsyncResult)> ()
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads ()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll ()> (1)
<android.provider.Settings$System: boolean putString (android.content.ContentResolver,java.lang.String,java.lang.String)> (13)
<android.media.AudioService$AudioHandler: void onHandlePersistMediaButtonReceiver (android.content.ComponentName)> (1)
<android.media.MediaScanner$MyMediaScannerClient: void setSettingIfNotSet (java.lang.String,android.net.Uri,long)> (1)
<android.media.RingtoneManager: void setActualDefaultRingtoneUri (android.content.Context,int,android.net.Uri)> (2)
<android.provider.Settings$System: boolean putFloat (android.content.ContentResolver,java.lang.String,float)> (3)
<android.provider.Settings$System: boolean putInt (android.content.ContentResolver,java.lang.String,int)> (47)
<android.provider.Settings$System: boolean putLong (android.content.ContentResolver,java.lang.String,long)> ()
<com.android.deskclock.AlarmPreference: void onSaveRingtone (android.net.Uri)> (1)
<com.android.deskclock.Alarms: void saveNextAlarm (android.content.Context,java.lang.String)> (2)
<com.android.music.MusicUtils: void setRingtone (android.content.Context,long)> (3)
<com.android.phone.sip.SipSharedPreferences: void setSipCallOption (java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void setDebugApp (java.lang.String,boolean,boolean)> (2)
<com.android.settings.DateTimeSettings: void onSharedPreferenceChanged (android.content.SharedPreferences,java.lang.String)> (1)
<com.android.settings.DateTimeSettings: void set24Hour (boolean)> (1)
<android.media.MediaScanner$MyMediaScannerClient: android.net.Uri endFile (android.media.MediaScanner$FileEntry,boolean,boolean,boolean,boolean,boolean)> (1)
<com.android.phone.DefaultRingtonePreference: void onSaveRingtone (android.net.Uri)> (1)
<com.android.settings.DefaultRingtonePreference: void onSaveRingtone (android.net.Uri)> (1)
<android.provider.Settings$System: boolean putConfiguration (android.content.ContentResolver,android.content.res.Configuration)> (2)
<android.hardware.input.InputManager: void setPointerSpeed (android.content.Context,int)> (1)
<android.media.AudioService$AudioHandler: void persistRingerMode (int)> (1)
<android.media.AudioService$AudioHandler: void persistVolume (android.media.AudioService$VolumeStreamState,int,int)> (1)
<android.media.AudioService: void readPersistedSettings ()> (2)
<android.provider.Settings$System: void setShowGTalkServiceStatus (android.content.ContentResolver,boolean)> ()
<com.android.contacts.preference.ContactsPreferences: void setDisplayOrder (int)> (1)
<com.android.contacts.preference.ContactsPreferences: void setSortOrder (int)> (1)
<com.android.deskclock.SettingsActivity: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.internal.policy.impl.GlobalActions: void changeAirplaneModeSystemSetting (boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void setUserRotationMode (int,int)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void putRecoveryAction (int)> (2)
<com.android.internal.view.RotationPolicy: void setRotationLock (android.content.Context,boolean)> (1)
<com.android.internal.view.RotationPolicy: void setRotationLockForAccessibility (android.content.Context,boolean)> (2)
<com.android.phone.CallFeaturesSetting: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.phone.EmergencyCallHelper: void powerOnRadio ()> (2)
<com.android.phone.sip.SipSharedPreferences: void setReceivingCallsEnabled (boolean)> (1)
<com.android.server.am.ActivityManagerService: void setAlwaysFinish (boolean)> (1)
<com.android.server.pm.PackageManagerService: boolean setInstallLocation (int)> (2)
<com.android.settings.AirplaneModeEnabler: void setAirplaneModeOn (boolean)> (2)
<com.android.settings.ApplicationSettings: void handleUpdateAppInstallLocation (java.lang.String)> (1)
<com.android.settings.BrightnessPreference: void setBrightness (int,boolean)> (5)
<com.android.settings.BrightnessPreference: void setMode (int)> (3)
<com.android.settings.CryptKeeper: void setAirplaneModeIfNecessary ()> (1)
<com.android.settings.DateTimeSettingsSetupWizard: void onCheckedChanged (android.widget.CompoundButton,boolean)> (1)
<com.android.settings.DateTimeSettingsSetupWizard: void onClick (android.view.View)> (1)
<com.android.settings.DevelopmentSettings: void writeCpuUsageOptions ()> (1)
<com.android.settings.DevelopmentSettings: void writePointerLocationOptions ()> (1)
<com.android.settings.DevelopmentSettings: void writeShowTouchesOptions ()> (1)
<com.android.settings.DisplaySettings: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.DockSettings: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.SoundSettings: boolean onPreferenceChange (android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.SoundSettings: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void toggleBrightness (android.content.Context)> (1)
<com.android.systemui.statusbar.policy.AirplaneModeController$1: void run ()> (1)
<com.android.systemui.statusbar.policy.BrightnessController$1: void run ()> (1)
<com.android.systemui.statusbar.policy.BrightnessController: void setMode (int)> (1)
<com.android.deskclock.Alarms: void disableAlert (android.content.Context)> (1)
<com.android.deskclock.Alarms: void enableAlert (android.content.Context,com.android.deskclock.Alarm,long)> (1)
<com.android.music.MediaPlaybackActivity: boolean onOptionsItemSelected (android.view.MenuItem)> (1)
<com.android.music.QueryBrowserActivity: boolean onOptionsItemSelected (android.view.MenuItem)> (2)
<com.android.music.TrackBrowserActivity: boolean onContextItemSelected (android.view.MenuItem)> (2)
<com.android.phone.CallFeaturesSetting: void handleSipCallOptionsChange (java.lang.Object)> (1)
<android.app.ActivityManagerNative: void setDebugApp (java.lang.String,boolean,boolean)> (2)
<com.android.settings.DateTimeSettings: boolean onPreferenceTreeClick (android.preference.PreferenceScreen,android.preference.Preference)> (1)
<android.media.MediaScanner$MyMediaScannerClient: android.net.Uri doScanFile (java.lang.String,java.lang.String,long,long,boolean,boolean,boolean)> (3)
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked (android.content.res.Configuration,com.android.server.am.ActivityRecord,boolean,boolean)> (7)
<com.android.settings.PointerSpeedPreference: void onDialogClosed (boolean)> (1)
<android.media.AudioService: void reloadAudioSettings ()> (2)
<com.android.contacts.preference.DisplayOrderPreference: boolean persistString (java.lang.String)> (3)
<com.android.contacts.preference.SortOrderPreference: boolean persistString (java.lang.String)> (3)
<com.android.internal.policy.impl.GlobalActions: void access$300 (com.android.internal.policy.impl.GlobalActions,boolean)> (2)
<android.view.WindowManagerPolicy: void setUserRotationMode (int,int)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void doRecovery ()> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void updateDataStallInfo ()> (1)
<com.android.systemui.statusbar.policy.AutoRotateController: void onCheckedChanged (android.widget.CompoundButton,boolean)> (1)
<com.android.settings.AccessibilitySettings: void handleLockScreenRotationPreferenceClick ()> (1)
<com.android.phone.EmergencyCallHelper: void onRetryTimeout ()> (3)
<com.android.phone.EmergencyCallHelper: void startSequenceInternal (android.os.Message)> (2)
<com.android.phone.sip.SipSettings: void handleSipReceiveCallsOption (boolean)> (1)
<android.app.ActivityManagerNative: void setAlwaysFinish (boolean)> (2)
<android.content.pm.IPackageManager$Stub$Proxy: boolean setInstallLocation (int)> ()
<android.content.pm.IPackageManager$Stub: boolean setInstallLocation (int)> (2)
<com.android.settings.AirplaneModeEnabler: boolean onPreferenceChange (android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.AirplaneModeEnabler: void setAirplaneModeInECM (boolean,boolean)> (1)
<com.android.settings.ApplicationSettings$1: boolean onPreferenceChange (android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.BrightnessPreference: void onCheckedChanged (android.widget.CompoundButton,boolean)> (1)
<com.android.settings.BrightnessPreference: void onDialogClosed (boolean)> (1)
<com.android.settings.BrightnessPreference: void onProgressChanged (android.widget.SeekBar,int,boolean)> (1)
<com.android.settings.BrightnessPreference: void onRestoreInstanceState (android.os.Parcelable)> (2)
<com.android.settings.BrightnessPreference: void restoreOldState ()> (2)
<com.android.settings.CryptKeeper: void onCreate (android.os.Bundle)> (1)
<com.android.systemui.statusbar.policy.BrightnessController: void onChanged (com.android.systemui.statusbar.policy.ToggleSlider,boolean,boolean,int)> (1)
<com.android.deskclock.Alarms: void setNextAlert (android.content.Context)> (7)
<android.app.IActivityManager: void setDebugApp (java.lang.String,boolean,boolean)> (4)
<android.media.MediaScanner: android.net.Uri scanSingleFile (java.lang.String,java.lang.String,java.lang.String)> (1)
<android.media.MediaScanner$MyMediaScannerClient: void scanFile (java.lang.String,long,long,boolean,boolean)> (1)
<android.media.MediaScanner: void scanMtpFile (java.lang.String,java.lang.String,int,int)> (1)
<com.android.server.am.ActivityManagerService: void retrieveSettings ()> (1)
<android.media.IAudioService$Stub$Proxy: void reloadAudioSettings ()> ()
<android.media.IAudioService$Stub: void reloadAudioSettings ()> (2)
<com.android.internal.policy.impl.GlobalActions$1: void onToggle (boolean)> (1)
<com.android.internal.policy.impl.GlobalActions$5: void onReceive (android.content.Context,android.content.Intent)> (1)
<com.android.server.wm.WindowManagerService: void freezeRotation (int)> (2)
<com.android.server.wm.WindowManagerService: void thawRotation ()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataStallAlarm (int)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPollPdp ()> (2)
<com.android.phone.EmergencyCallHelper: void startEmergencyCallFromAirplaneModeSequence (java.lang.String)> (1)
<com.android.phone.EmergencyCallHelper: void startRetryTimer ()> (2)
<com.android.phone.sip.SipSettings: void access$700 (com.android.phone.sip.SipSettings,boolean)> (1)
<android.app.IActivityManager: void setAlwaysFinish (boolean)> (1)
<android.content.pm.IPackageManager: boolean setInstallLocation (int)> (1)
<android.content.pm.IPackageManager$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.WirelessSettings: void onActivityResult (int,int,android.content.Intent)> (3)
<com.android.settings.BrightnessPreference: android.os.Parcelable onSaveInstanceState ()> (2)
<com.android.systemui.statusbar.policy.ToggleSlider$Listener: void onChanged (com.android.systemui.statusbar.policy.ToggleSlider,boolean,boolean,int)> (4)
<com.android.deskclock.AlarmInitReceiver$1: void run ()> (1)
<com.android.deskclock.AlarmReceiver: void handleIntent (android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.Alarms: long addAlarm (android.content.Context,com.android.deskclock.Alarm)> (1)
<com.android.deskclock.Alarms: long setAlarm (android.content.Context,com.android.deskclock.Alarm)> (2)
<com.android.deskclock.Alarms: void deleteAlarm (android.content.Context,int)> (3)
<com.android.deskclock.Alarms: void enableAlarm (android.content.Context,int,boolean)> (4)
<com.android.deskclock.Alarms: void saveSnoozeAlert (android.content.Context,int,long)> (3)
<com.android.commands.am.Am: void runClearDebugApp ()> (1)
<com.android.commands.am.Am: void runSetDebugApp ()> (1)
<com.android.settings.DevelopmentSettings: void resetDebuggerOptions ()> (1)
<com.android.settings.DevelopmentSettings: void writeDebuggerOptions ()> (2)
<com.android.providers.media.MediaScannerService: android.net.Uri scanFile (java.lang.String,java.lang.String)> (1)
<android.media.MediaScannerClient: void scanFile (java.lang.String,long,long,boolean,boolean)> ()
<android.mtp.MtpDatabase: void endSendObject (java.lang.String,int,int,boolean)> ()
<com.android.server.am.ActivityManagerService: void systemReady (java.lang.Runnable)> (3)
<android.media.IAudioService$Stub: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IAudioService: void reloadAudioSettings ()> (1)
<com.android.internal.policy.impl.GlobalActions$ToggleAction: void onToggle (boolean)> (1)
<android.view.IWindowManager$Stub$Proxy: void freezeRotation (int)> ()
<android.view.IWindowManager$Stub: void freezeRotation (int)> (2)
<android.view.IWindowManager$Stub$Proxy: void thawRotation ()> ()
<android.view.IWindowManager$Stub: void thawRotation ()> (2)
<com.android.internal.telephony.DataConnectionTracker: void onDataStallAlarm (int)> (2)
<com.android.phone.CallController: com.android.phone.Constants$CallStatusCode placeCallInternal (android.content.Intent)> (1)
<com.android.phone.EmergencyCallHelper: void scheduleRetryOrBailOut ()> (3)
<com.android.phone.sip.SipSettings$2$1: void run ()> (1)
<com.android.settings.DevelopmentSettings: void writeImmediatelyDestroyActivitiesOptions ()> (1)
<com.android.commands.pm.Pm: void runSetInstallLocation ()> (1)
<com.android.server.pm.PackageManagerService: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.systemui.statusbar.policy.ToggleSlider: void onCheckedChanged (android.widget.CompoundButton,boolean)> (1)
<com.android.systemui.statusbar.policy.ToggleSlider: void onProgressChanged (android.widget.SeekBar,int,boolean)> (1)
<com.android.systemui.statusbar.policy.ToggleSlider: void onStartTrackingTouch (android.widget.SeekBar)> (1)
<com.android.systemui.statusbar.policy.ToggleSlider: void onStopTrackingTouch (android.widget.SeekBar)> (1)
<com.android.deskclock.AlarmReceiver: void access$000 (com.android.deskclock.AlarmReceiver,android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.SetAlarm: long saveAlarm (com.android.deskclock.Alarm)> (4)
<com.android.deskclock.HandleSetAlarm: boolean handleCursorResult (android.database.Cursor,long,boolean,boolean)> (1)
<com.android.deskclock.AlarmClock$1: void onClick (android.content.DialogInterface,int)> (1)
<com.android.deskclock.SetAlarm$6: void onClick (android.content.DialogInterface,int)> (1)
<com.android.deskclock.SetAlarm: void revert ()> (1)
<com.android.deskclock.AlarmClock: boolean onContextItemSelected (android.view.MenuItem)> (1)
<com.android.deskclock.AlarmClock: void updateAlarm (boolean,com.android.deskclock.Alarm)> (1)
<com.android.deskclock.AlarmAlertFullScreen: void snooze ()> (3)
<com.android.settings.DevelopmentSettings: void onActivityResult (int,int,android.content.Intent)> (2)
<com.android.providers.media.MediaScannerService: android.net.Uri access$100 (com.android.providers.media.MediaScannerService,java.lang.String,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService$9$1: void run ()> (1)
<com.android.server.am.ActivityManagerService: void startRunning (java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<android.media.AudioService: boolean onTransact (int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.AudioManager: void reloadAudioSettings ()> (1)
<com.android.internal.policy.impl.GlobalActions$ToggleAction: void onPress ()> (3)
<android.view.IWindowManager: void freezeRotation (int)> (7)
<android.view.IWindowManager: void thawRotation ()> (4)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataStallAlarm (int)> (1)
<com.android.phone.CallController: void placeCall (android.content.Intent)> (3)
<com.android.phone.EmergencyCallHelper: void onDisconnect (android.os.Message)> (2)
<com.android.phone.EmergencyCallHelper: void placeEmergencyCall ()> (2)
<com.android.commands.pm.Pm: void run (java.lang.String[])> (1)
<com.android.deskclock.AlarmReceiver$1: void run ()> (1)
<com.android.deskclock.SetAlarm: long access$100 (com.android.deskclock.SetAlarm,com.android.deskclock.Alarm)> (2)
<com.android.deskclock.SetAlarm: void onTimeSet (android.widget.TimePicker,int,int)> (1)
<com.android.deskclock.SetAlarm: void saveAndExit ()> (2)
<com.android.deskclock.HandleSetAlarm: void onCreate (android.os.Bundle)> (1)
<com.android.deskclock.SetAlarm: void access$300 (com.android.deskclock.SetAlarm)> (1)
<com.android.deskclock.AlarmClock: void access$100 (com.android.deskclock.AlarmClock,boolean,com.android.deskclock.Alarm)> (1)
<com.android.deskclock.AlarmAlertFullScreen: boolean dispatchKeyEvent (android.view.KeyEvent)> (2)
<com.android.deskclock.AlarmAlertFullScreen: void access$000 (com.android.deskclock.AlarmAlertFullScreen)> (3)
<com.android.deskclock.AlarmAlert: void snooze ()> (1)
<android.app.ActivityManagerNative: void startRunning (java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: android.content.Context main (int)> (1)
<com.android.providers.settings.SettingsHelper: void applyAudioSettings ()> (1)
<com.android.internal.policy.impl.GlobalActions$1: void onPress ()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress ()> (1)
<com.android.internal.policy.impl.GlobalActions$SilentModeToggleAction: void onPress ()> (1)
<com.android.commands.monkey.MonkeyRotationEvent: int injectEvent (android.view.IWindowManager,android.app.IActivityManager,int)> (2)
<com.android.internal.view.RotationPolicy$1: void run ()> (1)
<com.android.internal.view.RotationPolicy$2: void run ()> (1)
<com.android.uiautomator.core.InteractionController: void freezeRotation ()> (1)
<com.android.uiautomator.core.InteractionController: void setRotationLeft ()> (1)
<com.android.uiautomator.core.InteractionController: void setRotationNatural ()> (1)
<com.android.uiautomator.core.InteractionController: void setRotationRight ()> (1)
<com.android.uiautomator.core.InteractionController: void unfreezeRotation ()> (1)
<com.android.phone.OtaUtils: void otaPerformActivation ()> (1)
<com.android.phone.OutgoingCallBroadcaster: void processIntent (android.content.Intent)> (1)
<com.android.phone.EmergencyCallHelper: void onServiceStateChanged (android.os.Message)> (2)
<com.android.commands.pm.Pm: void main (java.lang.String[])> ()
<com.android.deskclock.SetAlarm$2: void onClick (android.view.View)> (1)
<com.android.deskclock.SetAlarm$5: void run ()> (1)
<com.android.deskclock.SetAlarm: void access$000 (com.android.deskclock.SetAlarm)> (1)
<com.android.deskclock.SetAlarm: void onBackPressed ()> (3)
<com.android.deskclock.SetAlarm$3: void onClick (android.view.View)> (1)
<com.android.deskclock.AlarmClock$AlarmTimeAdapter$1: void onClick (android.view.View)> (1)
<com.android.deskclock.AlarmAlert: boolean dispatchKeyEvent (android.view.KeyEvent)> (2)
<com.android.deskclock.AlarmAlertFullScreen$1: void onReceive (android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.AlarmAlertFullScreen$2: void onClick (android.view.View)> (1)
<com.android.deskclock.AlarmAlert: void access$000 (com.android.deskclock.AlarmAlertFullScreen)> (1)
<android.app.IActivityManager: void startRunning (java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.internal.policy.impl.GlobalActions: void onClick (android.content.DialogInterface,int)> (1)
<com.android.commands.monkey.MonkeyEvent: int injectEvent (android.view.IWindowManager,android.app.IActivityManager,int)> (1)
<com.android.commands.monkey.Monkey: int run (java.lang.String[])> (1)
<com.android.uiautomator.core.UiDevice: void freezeRotation ()> ()
<com.android.uiautomator.core.UiDevice: void setRotationLeft ()> ()
<com.android.uiautomator.core.UiDevice: void setRotationNatural ()> ()
<com.android.uiautomator.core.UiDevice: void setRotationRight ()> ()
<com.android.uiautomator.core.UiDevice: void unfreezeRotation ()> ()
<com.android.phone.OtaUtils: void onClickOtaActivateButton ()> (1)
<com.android.phone.OutgoingCallBroadcaster: void onCreate (android.os.Bundle)> (1)
<com.android.deskclock.SetAlarm$1: void onClick (android.view.View)> (1)
<com.android.commands.monkey.Monkey: int runMonkeyCycles ()> (1)
<com.android.commands.monkey.Monkey: void main (java.lang.String[])> ()
<com.android.phone.OtaUtils: void onClickHandler (int)> (1)
<com.android.phone.InCallScreen: void onClick (android.view.View)> (1)
